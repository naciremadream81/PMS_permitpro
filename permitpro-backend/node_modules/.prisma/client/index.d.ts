
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Contractor
 * 
 */
export type Contractor = $Result.DefaultSelection<Prisma.$ContractorPayload>
/**
 * Model Subcontractor
 * 
 */
export type Subcontractor = $Result.DefaultSelection<Prisma.$SubcontractorPayload>
/**
 * Model Package
 * 
 */
export type Package = $Result.DefaultSelection<Prisma.$PackagePayload>
/**
 * Model PackageSubcontractor
 * 
 */
export type PackageSubcontractor = $Result.DefaultSelection<Prisma.$PackageSubcontractorPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.contractor`: Exposes CRUD operations for the **Contractor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contractors
    * const contractors = await prisma.contractor.findMany()
    * ```
    */
  get contractor(): Prisma.ContractorDelegate<ExtArgs>;

  /**
   * `prisma.subcontractor`: Exposes CRUD operations for the **Subcontractor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subcontractors
    * const subcontractors = await prisma.subcontractor.findMany()
    * ```
    */
  get subcontractor(): Prisma.SubcontractorDelegate<ExtArgs>;

  /**
   * `prisma.package`: Exposes CRUD operations for the **Package** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Packages
    * const packages = await prisma.package.findMany()
    * ```
    */
  get package(): Prisma.PackageDelegate<ExtArgs>;

  /**
   * `prisma.packageSubcontractor`: Exposes CRUD operations for the **PackageSubcontractor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PackageSubcontractors
    * const packageSubcontractors = await prisma.packageSubcontractor.findMany()
    * ```
    */
  get packageSubcontractor(): Prisma.PackageSubcontractorDelegate<ExtArgs>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Contractor: 'Contractor',
    Subcontractor: 'Subcontractor',
    Package: 'Package',
    PackageSubcontractor: 'PackageSubcontractor',
    Document: 'Document'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "contractor" | "subcontractor" | "package" | "packageSubcontractor" | "document"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Contractor: {
        payload: Prisma.$ContractorPayload<ExtArgs>
        fields: Prisma.ContractorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>
          }
          findFirst: {
            args: Prisma.ContractorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>
          }
          findMany: {
            args: Prisma.ContractorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>[]
          }
          create: {
            args: Prisma.ContractorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>
          }
          createMany: {
            args: Prisma.ContractorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>[]
          }
          delete: {
            args: Prisma.ContractorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>
          }
          update: {
            args: Prisma.ContractorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>
          }
          deleteMany: {
            args: Prisma.ContractorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContractorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorPayload>
          }
          aggregate: {
            args: Prisma.ContractorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContractor>
          }
          groupBy: {
            args: Prisma.ContractorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractorCountArgs<ExtArgs>
            result: $Utils.Optional<ContractorCountAggregateOutputType> | number
          }
        }
      }
      Subcontractor: {
        payload: Prisma.$SubcontractorPayload<ExtArgs>
        fields: Prisma.SubcontractorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubcontractorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcontractorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubcontractorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcontractorPayload>
          }
          findFirst: {
            args: Prisma.SubcontractorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcontractorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubcontractorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcontractorPayload>
          }
          findMany: {
            args: Prisma.SubcontractorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcontractorPayload>[]
          }
          create: {
            args: Prisma.SubcontractorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcontractorPayload>
          }
          createMany: {
            args: Prisma.SubcontractorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubcontractorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcontractorPayload>[]
          }
          delete: {
            args: Prisma.SubcontractorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcontractorPayload>
          }
          update: {
            args: Prisma.SubcontractorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcontractorPayload>
          }
          deleteMany: {
            args: Prisma.SubcontractorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubcontractorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubcontractorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcontractorPayload>
          }
          aggregate: {
            args: Prisma.SubcontractorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubcontractor>
          }
          groupBy: {
            args: Prisma.SubcontractorGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubcontractorGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubcontractorCountArgs<ExtArgs>
            result: $Utils.Optional<SubcontractorCountAggregateOutputType> | number
          }
        }
      }
      Package: {
        payload: Prisma.$PackagePayload<ExtArgs>
        fields: Prisma.PackageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findFirst: {
            args: Prisma.PackageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findMany: {
            args: Prisma.PackageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          create: {
            args: Prisma.PackageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          createMany: {
            args: Prisma.PackageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          delete: {
            args: Prisma.PackageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          update: {
            args: Prisma.PackageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          deleteMany: {
            args: Prisma.PackageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PackageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          aggregate: {
            args: Prisma.PackageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackage>
          }
          groupBy: {
            args: Prisma.PackageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackageCountArgs<ExtArgs>
            result: $Utils.Optional<PackageCountAggregateOutputType> | number
          }
        }
      }
      PackageSubcontractor: {
        payload: Prisma.$PackageSubcontractorPayload<ExtArgs>
        fields: Prisma.PackageSubcontractorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackageSubcontractorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageSubcontractorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackageSubcontractorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageSubcontractorPayload>
          }
          findFirst: {
            args: Prisma.PackageSubcontractorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageSubcontractorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackageSubcontractorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageSubcontractorPayload>
          }
          findMany: {
            args: Prisma.PackageSubcontractorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageSubcontractorPayload>[]
          }
          create: {
            args: Prisma.PackageSubcontractorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageSubcontractorPayload>
          }
          createMany: {
            args: Prisma.PackageSubcontractorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackageSubcontractorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageSubcontractorPayload>[]
          }
          delete: {
            args: Prisma.PackageSubcontractorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageSubcontractorPayload>
          }
          update: {
            args: Prisma.PackageSubcontractorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageSubcontractorPayload>
          }
          deleteMany: {
            args: Prisma.PackageSubcontractorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackageSubcontractorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PackageSubcontractorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageSubcontractorPayload>
          }
          aggregate: {
            args: Prisma.PackageSubcontractorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackageSubcontractor>
          }
          groupBy: {
            args: Prisma.PackageSubcontractorGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackageSubcontractorGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackageSubcontractorCountArgs<ExtArgs>
            result: $Utils.Optional<PackageSubcontractorCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ContractorCountOutputType
   */

  export type ContractorCountOutputType = {
    packages: number
    subcontractors: number
  }

  export type ContractorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packages?: boolean | ContractorCountOutputTypeCountPackagesArgs
    subcontractors?: boolean | ContractorCountOutputTypeCountSubcontractorsArgs
  }

  // Custom InputTypes
  /**
   * ContractorCountOutputType without action
   */
  export type ContractorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorCountOutputType
     */
    select?: ContractorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContractorCountOutputType without action
   */
  export type ContractorCountOutputTypeCountPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
  }

  /**
   * ContractorCountOutputType without action
   */
  export type ContractorCountOutputTypeCountSubcontractorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubcontractorWhereInput
  }


  /**
   * Count Type SubcontractorCountOutputType
   */

  export type SubcontractorCountOutputType = {
    packages: number
  }

  export type SubcontractorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packages?: boolean | SubcontractorCountOutputTypeCountPackagesArgs
  }

  // Custom InputTypes
  /**
   * SubcontractorCountOutputType without action
   */
  export type SubcontractorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubcontractorCountOutputType
     */
    select?: SubcontractorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubcontractorCountOutputType without action
   */
  export type SubcontractorCountOutputTypeCountPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageSubcontractorWhereInput
  }


  /**
   * Count Type PackageCountOutputType
   */

  export type PackageCountOutputType = {
    documents: number
    subcontractors: number
  }

  export type PackageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | PackageCountOutputTypeCountDocumentsArgs
    subcontractors?: boolean | PackageCountOutputTypeCountSubcontractorsArgs
  }

  // Custom InputTypes
  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageCountOutputType
     */
    select?: PackageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountSubcontractorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageSubcontractorWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    role: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    role: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string
    role: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string
      role: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }


  /**
   * Model Contractor
   */

  export type AggregateContractor = {
    _count: ContractorCountAggregateOutputType | null
    _avg: ContractorAvgAggregateOutputType | null
    _sum: ContractorSumAggregateOutputType | null
    _min: ContractorMinAggregateOutputType | null
    _max: ContractorMaxAggregateOutputType | null
  }

  export type ContractorAvgAggregateOutputType = {
    id: number | null
  }

  export type ContractorSumAggregateOutputType = {
    id: number | null
  }

  export type ContractorMinAggregateOutputType = {
    id: number | null
    companyName: string | null
    licenseNumber: string | null
    address: string | null
    phoneNumber: string | null
    email: string | null
    contactPerson: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractorMaxAggregateOutputType = {
    id: number | null
    companyName: string | null
    licenseNumber: string | null
    address: string | null
    phoneNumber: string | null
    email: string | null
    contactPerson: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractorCountAggregateOutputType = {
    id: number
    companyName: number
    licenseNumber: number
    address: number
    phoneNumber: number
    email: number
    contactPerson: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContractorAvgAggregateInputType = {
    id?: true
  }

  export type ContractorSumAggregateInputType = {
    id?: true
  }

  export type ContractorMinAggregateInputType = {
    id?: true
    companyName?: true
    licenseNumber?: true
    address?: true
    phoneNumber?: true
    email?: true
    contactPerson?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractorMaxAggregateInputType = {
    id?: true
    companyName?: true
    licenseNumber?: true
    address?: true
    phoneNumber?: true
    email?: true
    contactPerson?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractorCountAggregateInputType = {
    id?: true
    companyName?: true
    licenseNumber?: true
    address?: true
    phoneNumber?: true
    email?: true
    contactPerson?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContractorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contractor to aggregate.
     */
    where?: ContractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contractors to fetch.
     */
    orderBy?: ContractorOrderByWithRelationInput | ContractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contractors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contractors
    **/
    _count?: true | ContractorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContractorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContractorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractorMaxAggregateInputType
  }

  export type GetContractorAggregateType<T extends ContractorAggregateArgs> = {
        [P in keyof T & keyof AggregateContractor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContractor[P]>
      : GetScalarType<T[P], AggregateContractor[P]>
  }




  export type ContractorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractorWhereInput
    orderBy?: ContractorOrderByWithAggregationInput | ContractorOrderByWithAggregationInput[]
    by: ContractorScalarFieldEnum[] | ContractorScalarFieldEnum
    having?: ContractorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractorCountAggregateInputType | true
    _avg?: ContractorAvgAggregateInputType
    _sum?: ContractorSumAggregateInputType
    _min?: ContractorMinAggregateInputType
    _max?: ContractorMaxAggregateInputType
  }

  export type ContractorGroupByOutputType = {
    id: number
    companyName: string
    licenseNumber: string
    address: string
    phoneNumber: string
    email: string | null
    contactPerson: string | null
    createdAt: Date
    updatedAt: Date
    _count: ContractorCountAggregateOutputType | null
    _avg: ContractorAvgAggregateOutputType | null
    _sum: ContractorSumAggregateOutputType | null
    _min: ContractorMinAggregateOutputType | null
    _max: ContractorMaxAggregateOutputType | null
  }

  type GetContractorGroupByPayload<T extends ContractorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractorGroupByOutputType[P]>
            : GetScalarType<T[P], ContractorGroupByOutputType[P]>
        }
      >
    >


  export type ContractorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyName?: boolean
    licenseNumber?: boolean
    address?: boolean
    phoneNumber?: boolean
    email?: boolean
    contactPerson?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    packages?: boolean | Contractor$packagesArgs<ExtArgs>
    subcontractors?: boolean | Contractor$subcontractorsArgs<ExtArgs>
    _count?: boolean | ContractorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractor"]>

  export type ContractorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyName?: boolean
    licenseNumber?: boolean
    address?: boolean
    phoneNumber?: boolean
    email?: boolean
    contactPerson?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["contractor"]>

  export type ContractorSelectScalar = {
    id?: boolean
    companyName?: boolean
    licenseNumber?: boolean
    address?: boolean
    phoneNumber?: boolean
    email?: boolean
    contactPerson?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContractorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packages?: boolean | Contractor$packagesArgs<ExtArgs>
    subcontractors?: boolean | Contractor$subcontractorsArgs<ExtArgs>
    _count?: boolean | ContractorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContractorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ContractorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contractor"
    objects: {
      packages: Prisma.$PackagePayload<ExtArgs>[]
      subcontractors: Prisma.$SubcontractorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      companyName: string
      licenseNumber: string
      address: string
      phoneNumber: string
      email: string | null
      contactPerson: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contractor"]>
    composites: {}
  }

  type ContractorGetPayload<S extends boolean | null | undefined | ContractorDefaultArgs> = $Result.GetResult<Prisma.$ContractorPayload, S>

  type ContractorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContractorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContractorCountAggregateInputType | true
    }

  export interface ContractorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contractor'], meta: { name: 'Contractor' } }
    /**
     * Find zero or one Contractor that matches the filter.
     * @param {ContractorFindUniqueArgs} args - Arguments to find a Contractor
     * @example
     * // Get one Contractor
     * const contractor = await prisma.contractor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractorFindUniqueArgs>(args: SelectSubset<T, ContractorFindUniqueArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Contractor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContractorFindUniqueOrThrowArgs} args - Arguments to find a Contractor
     * @example
     * // Get one Contractor
     * const contractor = await prisma.contractor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractorFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Contractor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorFindFirstArgs} args - Arguments to find a Contractor
     * @example
     * // Get one Contractor
     * const contractor = await prisma.contractor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractorFindFirstArgs>(args?: SelectSubset<T, ContractorFindFirstArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Contractor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorFindFirstOrThrowArgs} args - Arguments to find a Contractor
     * @example
     * // Get one Contractor
     * const contractor = await prisma.contractor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractorFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractorFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Contractors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contractors
     * const contractors = await prisma.contractor.findMany()
     * 
     * // Get first 10 Contractors
     * const contractors = await prisma.contractor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractorWithIdOnly = await prisma.contractor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractorFindManyArgs>(args?: SelectSubset<T, ContractorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Contractor.
     * @param {ContractorCreateArgs} args - Arguments to create a Contractor.
     * @example
     * // Create one Contractor
     * const Contractor = await prisma.contractor.create({
     *   data: {
     *     // ... data to create a Contractor
     *   }
     * })
     * 
     */
    create<T extends ContractorCreateArgs>(args: SelectSubset<T, ContractorCreateArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Contractors.
     * @param {ContractorCreateManyArgs} args - Arguments to create many Contractors.
     * @example
     * // Create many Contractors
     * const contractor = await prisma.contractor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractorCreateManyArgs>(args?: SelectSubset<T, ContractorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contractors and returns the data saved in the database.
     * @param {ContractorCreateManyAndReturnArgs} args - Arguments to create many Contractors.
     * @example
     * // Create many Contractors
     * const contractor = await prisma.contractor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contractors and only return the `id`
     * const contractorWithIdOnly = await prisma.contractor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractorCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Contractor.
     * @param {ContractorDeleteArgs} args - Arguments to delete one Contractor.
     * @example
     * // Delete one Contractor
     * const Contractor = await prisma.contractor.delete({
     *   where: {
     *     // ... filter to delete one Contractor
     *   }
     * })
     * 
     */
    delete<T extends ContractorDeleteArgs>(args: SelectSubset<T, ContractorDeleteArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Contractor.
     * @param {ContractorUpdateArgs} args - Arguments to update one Contractor.
     * @example
     * // Update one Contractor
     * const contractor = await prisma.contractor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractorUpdateArgs>(args: SelectSubset<T, ContractorUpdateArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Contractors.
     * @param {ContractorDeleteManyArgs} args - Arguments to filter Contractors to delete.
     * @example
     * // Delete a few Contractors
     * const { count } = await prisma.contractor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractorDeleteManyArgs>(args?: SelectSubset<T, ContractorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contractors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contractors
     * const contractor = await prisma.contractor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractorUpdateManyArgs>(args: SelectSubset<T, ContractorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contractor.
     * @param {ContractorUpsertArgs} args - Arguments to update or create a Contractor.
     * @example
     * // Update or create a Contractor
     * const contractor = await prisma.contractor.upsert({
     *   create: {
     *     // ... data to create a Contractor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contractor we want to update
     *   }
     * })
     */
    upsert<T extends ContractorUpsertArgs>(args: SelectSubset<T, ContractorUpsertArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Contractors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorCountArgs} args - Arguments to filter Contractors to count.
     * @example
     * // Count the number of Contractors
     * const count = await prisma.contractor.count({
     *   where: {
     *     // ... the filter for the Contractors we want to count
     *   }
     * })
    **/
    count<T extends ContractorCountArgs>(
      args?: Subset<T, ContractorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contractor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractorAggregateArgs>(args: Subset<T, ContractorAggregateArgs>): Prisma.PrismaPromise<GetContractorAggregateType<T>>

    /**
     * Group by Contractor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractorGroupByArgs['orderBy'] }
        : { orderBy?: ContractorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contractor model
   */
  readonly fields: ContractorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contractor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    packages<T extends Contractor$packagesArgs<ExtArgs> = {}>(args?: Subset<T, Contractor$packagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany"> | Null>
    subcontractors<T extends Contractor$subcontractorsArgs<ExtArgs> = {}>(args?: Subset<T, Contractor$subcontractorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubcontractorPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contractor model
   */ 
  interface ContractorFieldRefs {
    readonly id: FieldRef<"Contractor", 'Int'>
    readonly companyName: FieldRef<"Contractor", 'String'>
    readonly licenseNumber: FieldRef<"Contractor", 'String'>
    readonly address: FieldRef<"Contractor", 'String'>
    readonly phoneNumber: FieldRef<"Contractor", 'String'>
    readonly email: FieldRef<"Contractor", 'String'>
    readonly contactPerson: FieldRef<"Contractor", 'String'>
    readonly createdAt: FieldRef<"Contractor", 'DateTime'>
    readonly updatedAt: FieldRef<"Contractor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contractor findUnique
   */
  export type ContractorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * Filter, which Contractor to fetch.
     */
    where: ContractorWhereUniqueInput
  }

  /**
   * Contractor findUniqueOrThrow
   */
  export type ContractorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * Filter, which Contractor to fetch.
     */
    where: ContractorWhereUniqueInput
  }

  /**
   * Contractor findFirst
   */
  export type ContractorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * Filter, which Contractor to fetch.
     */
    where?: ContractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contractors to fetch.
     */
    orderBy?: ContractorOrderByWithRelationInput | ContractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contractors.
     */
    cursor?: ContractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contractors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contractors.
     */
    distinct?: ContractorScalarFieldEnum | ContractorScalarFieldEnum[]
  }

  /**
   * Contractor findFirstOrThrow
   */
  export type ContractorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * Filter, which Contractor to fetch.
     */
    where?: ContractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contractors to fetch.
     */
    orderBy?: ContractorOrderByWithRelationInput | ContractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contractors.
     */
    cursor?: ContractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contractors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contractors.
     */
    distinct?: ContractorScalarFieldEnum | ContractorScalarFieldEnum[]
  }

  /**
   * Contractor findMany
   */
  export type ContractorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * Filter, which Contractors to fetch.
     */
    where?: ContractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contractors to fetch.
     */
    orderBy?: ContractorOrderByWithRelationInput | ContractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contractors.
     */
    cursor?: ContractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contractors.
     */
    skip?: number
    distinct?: ContractorScalarFieldEnum | ContractorScalarFieldEnum[]
  }

  /**
   * Contractor create
   */
  export type ContractorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * The data needed to create a Contractor.
     */
    data: XOR<ContractorCreateInput, ContractorUncheckedCreateInput>
  }

  /**
   * Contractor createMany
   */
  export type ContractorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contractors.
     */
    data: ContractorCreateManyInput | ContractorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contractor createManyAndReturn
   */
  export type ContractorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Contractors.
     */
    data: ContractorCreateManyInput | ContractorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contractor update
   */
  export type ContractorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * The data needed to update a Contractor.
     */
    data: XOR<ContractorUpdateInput, ContractorUncheckedUpdateInput>
    /**
     * Choose, which Contractor to update.
     */
    where: ContractorWhereUniqueInput
  }

  /**
   * Contractor updateMany
   */
  export type ContractorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contractors.
     */
    data: XOR<ContractorUpdateManyMutationInput, ContractorUncheckedUpdateManyInput>
    /**
     * Filter which Contractors to update
     */
    where?: ContractorWhereInput
  }

  /**
   * Contractor upsert
   */
  export type ContractorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * The filter to search for the Contractor to update in case it exists.
     */
    where: ContractorWhereUniqueInput
    /**
     * In case the Contractor found by the `where` argument doesn't exist, create a new Contractor with this data.
     */
    create: XOR<ContractorCreateInput, ContractorUncheckedCreateInput>
    /**
     * In case the Contractor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractorUpdateInput, ContractorUncheckedUpdateInput>
  }

  /**
   * Contractor delete
   */
  export type ContractorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
    /**
     * Filter which Contractor to delete.
     */
    where: ContractorWhereUniqueInput
  }

  /**
   * Contractor deleteMany
   */
  export type ContractorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contractors to delete
     */
    where?: ContractorWhereInput
  }

  /**
   * Contractor.packages
   */
  export type Contractor$packagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    cursor?: PackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Contractor.subcontractors
   */
  export type Contractor$subcontractorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcontractor
     */
    select?: SubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcontractorInclude<ExtArgs> | null
    where?: SubcontractorWhereInput
    orderBy?: SubcontractorOrderByWithRelationInput | SubcontractorOrderByWithRelationInput[]
    cursor?: SubcontractorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubcontractorScalarFieldEnum | SubcontractorScalarFieldEnum[]
  }

  /**
   * Contractor without action
   */
  export type ContractorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contractor
     */
    select?: ContractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorInclude<ExtArgs> | null
  }


  /**
   * Model Subcontractor
   */

  export type AggregateSubcontractor = {
    _count: SubcontractorCountAggregateOutputType | null
    _avg: SubcontractorAvgAggregateOutputType | null
    _sum: SubcontractorSumAggregateOutputType | null
    _min: SubcontractorMinAggregateOutputType | null
    _max: SubcontractorMaxAggregateOutputType | null
  }

  export type SubcontractorAvgAggregateOutputType = {
    id: number | null
    contractorId: number | null
  }

  export type SubcontractorSumAggregateOutputType = {
    id: number | null
    contractorId: number | null
  }

  export type SubcontractorMinAggregateOutputType = {
    id: number | null
    companyName: string | null
    licenseNumber: string | null
    address: string | null
    phoneNumber: string | null
    email: string | null
    contactPerson: string | null
    tradeType: string | null
    createdAt: Date | null
    updatedAt: Date | null
    contractorId: number | null
  }

  export type SubcontractorMaxAggregateOutputType = {
    id: number | null
    companyName: string | null
    licenseNumber: string | null
    address: string | null
    phoneNumber: string | null
    email: string | null
    contactPerson: string | null
    tradeType: string | null
    createdAt: Date | null
    updatedAt: Date | null
    contractorId: number | null
  }

  export type SubcontractorCountAggregateOutputType = {
    id: number
    companyName: number
    licenseNumber: number
    address: number
    phoneNumber: number
    email: number
    contactPerson: number
    tradeType: number
    createdAt: number
    updatedAt: number
    contractorId: number
    _all: number
  }


  export type SubcontractorAvgAggregateInputType = {
    id?: true
    contractorId?: true
  }

  export type SubcontractorSumAggregateInputType = {
    id?: true
    contractorId?: true
  }

  export type SubcontractorMinAggregateInputType = {
    id?: true
    companyName?: true
    licenseNumber?: true
    address?: true
    phoneNumber?: true
    email?: true
    contactPerson?: true
    tradeType?: true
    createdAt?: true
    updatedAt?: true
    contractorId?: true
  }

  export type SubcontractorMaxAggregateInputType = {
    id?: true
    companyName?: true
    licenseNumber?: true
    address?: true
    phoneNumber?: true
    email?: true
    contactPerson?: true
    tradeType?: true
    createdAt?: true
    updatedAt?: true
    contractorId?: true
  }

  export type SubcontractorCountAggregateInputType = {
    id?: true
    companyName?: true
    licenseNumber?: true
    address?: true
    phoneNumber?: true
    email?: true
    contactPerson?: true
    tradeType?: true
    createdAt?: true
    updatedAt?: true
    contractorId?: true
    _all?: true
  }

  export type SubcontractorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subcontractor to aggregate.
     */
    where?: SubcontractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subcontractors to fetch.
     */
    orderBy?: SubcontractorOrderByWithRelationInput | SubcontractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubcontractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subcontractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subcontractors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subcontractors
    **/
    _count?: true | SubcontractorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubcontractorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubcontractorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubcontractorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubcontractorMaxAggregateInputType
  }

  export type GetSubcontractorAggregateType<T extends SubcontractorAggregateArgs> = {
        [P in keyof T & keyof AggregateSubcontractor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubcontractor[P]>
      : GetScalarType<T[P], AggregateSubcontractor[P]>
  }




  export type SubcontractorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubcontractorWhereInput
    orderBy?: SubcontractorOrderByWithAggregationInput | SubcontractorOrderByWithAggregationInput[]
    by: SubcontractorScalarFieldEnum[] | SubcontractorScalarFieldEnum
    having?: SubcontractorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubcontractorCountAggregateInputType | true
    _avg?: SubcontractorAvgAggregateInputType
    _sum?: SubcontractorSumAggregateInputType
    _min?: SubcontractorMinAggregateInputType
    _max?: SubcontractorMaxAggregateInputType
  }

  export type SubcontractorGroupByOutputType = {
    id: number
    companyName: string
    licenseNumber: string | null
    address: string | null
    phoneNumber: string | null
    email: string | null
    contactPerson: string | null
    tradeType: string
    createdAt: Date
    updatedAt: Date
    contractorId: number
    _count: SubcontractorCountAggregateOutputType | null
    _avg: SubcontractorAvgAggregateOutputType | null
    _sum: SubcontractorSumAggregateOutputType | null
    _min: SubcontractorMinAggregateOutputType | null
    _max: SubcontractorMaxAggregateOutputType | null
  }

  type GetSubcontractorGroupByPayload<T extends SubcontractorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubcontractorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubcontractorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubcontractorGroupByOutputType[P]>
            : GetScalarType<T[P], SubcontractorGroupByOutputType[P]>
        }
      >
    >


  export type SubcontractorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyName?: boolean
    licenseNumber?: boolean
    address?: boolean
    phoneNumber?: boolean
    email?: boolean
    contactPerson?: boolean
    tradeType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contractorId?: boolean
    contractor?: boolean | ContractorDefaultArgs<ExtArgs>
    packages?: boolean | Subcontractor$packagesArgs<ExtArgs>
    _count?: boolean | SubcontractorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subcontractor"]>

  export type SubcontractorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyName?: boolean
    licenseNumber?: boolean
    address?: boolean
    phoneNumber?: boolean
    email?: boolean
    contactPerson?: boolean
    tradeType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contractorId?: boolean
    contractor?: boolean | ContractorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subcontractor"]>

  export type SubcontractorSelectScalar = {
    id?: boolean
    companyName?: boolean
    licenseNumber?: boolean
    address?: boolean
    phoneNumber?: boolean
    email?: boolean
    contactPerson?: boolean
    tradeType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contractorId?: boolean
  }

  export type SubcontractorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contractor?: boolean | ContractorDefaultArgs<ExtArgs>
    packages?: boolean | Subcontractor$packagesArgs<ExtArgs>
    _count?: boolean | SubcontractorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubcontractorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contractor?: boolean | ContractorDefaultArgs<ExtArgs>
  }

  export type $SubcontractorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subcontractor"
    objects: {
      contractor: Prisma.$ContractorPayload<ExtArgs>
      packages: Prisma.$PackageSubcontractorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      companyName: string
      licenseNumber: string | null
      address: string | null
      phoneNumber: string | null
      email: string | null
      contactPerson: string | null
      tradeType: string
      createdAt: Date
      updatedAt: Date
      contractorId: number
    }, ExtArgs["result"]["subcontractor"]>
    composites: {}
  }

  type SubcontractorGetPayload<S extends boolean | null | undefined | SubcontractorDefaultArgs> = $Result.GetResult<Prisma.$SubcontractorPayload, S>

  type SubcontractorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubcontractorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubcontractorCountAggregateInputType | true
    }

  export interface SubcontractorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subcontractor'], meta: { name: 'Subcontractor' } }
    /**
     * Find zero or one Subcontractor that matches the filter.
     * @param {SubcontractorFindUniqueArgs} args - Arguments to find a Subcontractor
     * @example
     * // Get one Subcontractor
     * const subcontractor = await prisma.subcontractor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubcontractorFindUniqueArgs>(args: SelectSubset<T, SubcontractorFindUniqueArgs<ExtArgs>>): Prisma__SubcontractorClient<$Result.GetResult<Prisma.$SubcontractorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Subcontractor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubcontractorFindUniqueOrThrowArgs} args - Arguments to find a Subcontractor
     * @example
     * // Get one Subcontractor
     * const subcontractor = await prisma.subcontractor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubcontractorFindUniqueOrThrowArgs>(args: SelectSubset<T, SubcontractorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubcontractorClient<$Result.GetResult<Prisma.$SubcontractorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Subcontractor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcontractorFindFirstArgs} args - Arguments to find a Subcontractor
     * @example
     * // Get one Subcontractor
     * const subcontractor = await prisma.subcontractor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubcontractorFindFirstArgs>(args?: SelectSubset<T, SubcontractorFindFirstArgs<ExtArgs>>): Prisma__SubcontractorClient<$Result.GetResult<Prisma.$SubcontractorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Subcontractor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcontractorFindFirstOrThrowArgs} args - Arguments to find a Subcontractor
     * @example
     * // Get one Subcontractor
     * const subcontractor = await prisma.subcontractor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubcontractorFindFirstOrThrowArgs>(args?: SelectSubset<T, SubcontractorFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubcontractorClient<$Result.GetResult<Prisma.$SubcontractorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Subcontractors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcontractorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subcontractors
     * const subcontractors = await prisma.subcontractor.findMany()
     * 
     * // Get first 10 Subcontractors
     * const subcontractors = await prisma.subcontractor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subcontractorWithIdOnly = await prisma.subcontractor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubcontractorFindManyArgs>(args?: SelectSubset<T, SubcontractorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubcontractorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Subcontractor.
     * @param {SubcontractorCreateArgs} args - Arguments to create a Subcontractor.
     * @example
     * // Create one Subcontractor
     * const Subcontractor = await prisma.subcontractor.create({
     *   data: {
     *     // ... data to create a Subcontractor
     *   }
     * })
     * 
     */
    create<T extends SubcontractorCreateArgs>(args: SelectSubset<T, SubcontractorCreateArgs<ExtArgs>>): Prisma__SubcontractorClient<$Result.GetResult<Prisma.$SubcontractorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Subcontractors.
     * @param {SubcontractorCreateManyArgs} args - Arguments to create many Subcontractors.
     * @example
     * // Create many Subcontractors
     * const subcontractor = await prisma.subcontractor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubcontractorCreateManyArgs>(args?: SelectSubset<T, SubcontractorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subcontractors and returns the data saved in the database.
     * @param {SubcontractorCreateManyAndReturnArgs} args - Arguments to create many Subcontractors.
     * @example
     * // Create many Subcontractors
     * const subcontractor = await prisma.subcontractor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subcontractors and only return the `id`
     * const subcontractorWithIdOnly = await prisma.subcontractor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubcontractorCreateManyAndReturnArgs>(args?: SelectSubset<T, SubcontractorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubcontractorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Subcontractor.
     * @param {SubcontractorDeleteArgs} args - Arguments to delete one Subcontractor.
     * @example
     * // Delete one Subcontractor
     * const Subcontractor = await prisma.subcontractor.delete({
     *   where: {
     *     // ... filter to delete one Subcontractor
     *   }
     * })
     * 
     */
    delete<T extends SubcontractorDeleteArgs>(args: SelectSubset<T, SubcontractorDeleteArgs<ExtArgs>>): Prisma__SubcontractorClient<$Result.GetResult<Prisma.$SubcontractorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Subcontractor.
     * @param {SubcontractorUpdateArgs} args - Arguments to update one Subcontractor.
     * @example
     * // Update one Subcontractor
     * const subcontractor = await prisma.subcontractor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubcontractorUpdateArgs>(args: SelectSubset<T, SubcontractorUpdateArgs<ExtArgs>>): Prisma__SubcontractorClient<$Result.GetResult<Prisma.$SubcontractorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Subcontractors.
     * @param {SubcontractorDeleteManyArgs} args - Arguments to filter Subcontractors to delete.
     * @example
     * // Delete a few Subcontractors
     * const { count } = await prisma.subcontractor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubcontractorDeleteManyArgs>(args?: SelectSubset<T, SubcontractorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subcontractors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcontractorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subcontractors
     * const subcontractor = await prisma.subcontractor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubcontractorUpdateManyArgs>(args: SelectSubset<T, SubcontractorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subcontractor.
     * @param {SubcontractorUpsertArgs} args - Arguments to update or create a Subcontractor.
     * @example
     * // Update or create a Subcontractor
     * const subcontractor = await prisma.subcontractor.upsert({
     *   create: {
     *     // ... data to create a Subcontractor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subcontractor we want to update
     *   }
     * })
     */
    upsert<T extends SubcontractorUpsertArgs>(args: SelectSubset<T, SubcontractorUpsertArgs<ExtArgs>>): Prisma__SubcontractorClient<$Result.GetResult<Prisma.$SubcontractorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Subcontractors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcontractorCountArgs} args - Arguments to filter Subcontractors to count.
     * @example
     * // Count the number of Subcontractors
     * const count = await prisma.subcontractor.count({
     *   where: {
     *     // ... the filter for the Subcontractors we want to count
     *   }
     * })
    **/
    count<T extends SubcontractorCountArgs>(
      args?: Subset<T, SubcontractorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubcontractorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subcontractor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcontractorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubcontractorAggregateArgs>(args: Subset<T, SubcontractorAggregateArgs>): Prisma.PrismaPromise<GetSubcontractorAggregateType<T>>

    /**
     * Group by Subcontractor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcontractorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubcontractorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubcontractorGroupByArgs['orderBy'] }
        : { orderBy?: SubcontractorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubcontractorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubcontractorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subcontractor model
   */
  readonly fields: SubcontractorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subcontractor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubcontractorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contractor<T extends ContractorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractorDefaultArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    packages<T extends Subcontractor$packagesArgs<ExtArgs> = {}>(args?: Subset<T, Subcontractor$packagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageSubcontractorPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subcontractor model
   */ 
  interface SubcontractorFieldRefs {
    readonly id: FieldRef<"Subcontractor", 'Int'>
    readonly companyName: FieldRef<"Subcontractor", 'String'>
    readonly licenseNumber: FieldRef<"Subcontractor", 'String'>
    readonly address: FieldRef<"Subcontractor", 'String'>
    readonly phoneNumber: FieldRef<"Subcontractor", 'String'>
    readonly email: FieldRef<"Subcontractor", 'String'>
    readonly contactPerson: FieldRef<"Subcontractor", 'String'>
    readonly tradeType: FieldRef<"Subcontractor", 'String'>
    readonly createdAt: FieldRef<"Subcontractor", 'DateTime'>
    readonly updatedAt: FieldRef<"Subcontractor", 'DateTime'>
    readonly contractorId: FieldRef<"Subcontractor", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Subcontractor findUnique
   */
  export type SubcontractorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcontractor
     */
    select?: SubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcontractorInclude<ExtArgs> | null
    /**
     * Filter, which Subcontractor to fetch.
     */
    where: SubcontractorWhereUniqueInput
  }

  /**
   * Subcontractor findUniqueOrThrow
   */
  export type SubcontractorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcontractor
     */
    select?: SubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcontractorInclude<ExtArgs> | null
    /**
     * Filter, which Subcontractor to fetch.
     */
    where: SubcontractorWhereUniqueInput
  }

  /**
   * Subcontractor findFirst
   */
  export type SubcontractorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcontractor
     */
    select?: SubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcontractorInclude<ExtArgs> | null
    /**
     * Filter, which Subcontractor to fetch.
     */
    where?: SubcontractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subcontractors to fetch.
     */
    orderBy?: SubcontractorOrderByWithRelationInput | SubcontractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subcontractors.
     */
    cursor?: SubcontractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subcontractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subcontractors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subcontractors.
     */
    distinct?: SubcontractorScalarFieldEnum | SubcontractorScalarFieldEnum[]
  }

  /**
   * Subcontractor findFirstOrThrow
   */
  export type SubcontractorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcontractor
     */
    select?: SubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcontractorInclude<ExtArgs> | null
    /**
     * Filter, which Subcontractor to fetch.
     */
    where?: SubcontractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subcontractors to fetch.
     */
    orderBy?: SubcontractorOrderByWithRelationInput | SubcontractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subcontractors.
     */
    cursor?: SubcontractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subcontractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subcontractors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subcontractors.
     */
    distinct?: SubcontractorScalarFieldEnum | SubcontractorScalarFieldEnum[]
  }

  /**
   * Subcontractor findMany
   */
  export type SubcontractorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcontractor
     */
    select?: SubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcontractorInclude<ExtArgs> | null
    /**
     * Filter, which Subcontractors to fetch.
     */
    where?: SubcontractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subcontractors to fetch.
     */
    orderBy?: SubcontractorOrderByWithRelationInput | SubcontractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subcontractors.
     */
    cursor?: SubcontractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subcontractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subcontractors.
     */
    skip?: number
    distinct?: SubcontractorScalarFieldEnum | SubcontractorScalarFieldEnum[]
  }

  /**
   * Subcontractor create
   */
  export type SubcontractorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcontractor
     */
    select?: SubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcontractorInclude<ExtArgs> | null
    /**
     * The data needed to create a Subcontractor.
     */
    data: XOR<SubcontractorCreateInput, SubcontractorUncheckedCreateInput>
  }

  /**
   * Subcontractor createMany
   */
  export type SubcontractorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subcontractors.
     */
    data: SubcontractorCreateManyInput | SubcontractorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subcontractor createManyAndReturn
   */
  export type SubcontractorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcontractor
     */
    select?: SubcontractorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Subcontractors.
     */
    data: SubcontractorCreateManyInput | SubcontractorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcontractorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subcontractor update
   */
  export type SubcontractorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcontractor
     */
    select?: SubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcontractorInclude<ExtArgs> | null
    /**
     * The data needed to update a Subcontractor.
     */
    data: XOR<SubcontractorUpdateInput, SubcontractorUncheckedUpdateInput>
    /**
     * Choose, which Subcontractor to update.
     */
    where: SubcontractorWhereUniqueInput
  }

  /**
   * Subcontractor updateMany
   */
  export type SubcontractorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subcontractors.
     */
    data: XOR<SubcontractorUpdateManyMutationInput, SubcontractorUncheckedUpdateManyInput>
    /**
     * Filter which Subcontractors to update
     */
    where?: SubcontractorWhereInput
  }

  /**
   * Subcontractor upsert
   */
  export type SubcontractorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcontractor
     */
    select?: SubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcontractorInclude<ExtArgs> | null
    /**
     * The filter to search for the Subcontractor to update in case it exists.
     */
    where: SubcontractorWhereUniqueInput
    /**
     * In case the Subcontractor found by the `where` argument doesn't exist, create a new Subcontractor with this data.
     */
    create: XOR<SubcontractorCreateInput, SubcontractorUncheckedCreateInput>
    /**
     * In case the Subcontractor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubcontractorUpdateInput, SubcontractorUncheckedUpdateInput>
  }

  /**
   * Subcontractor delete
   */
  export type SubcontractorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcontractor
     */
    select?: SubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcontractorInclude<ExtArgs> | null
    /**
     * Filter which Subcontractor to delete.
     */
    where: SubcontractorWhereUniqueInput
  }

  /**
   * Subcontractor deleteMany
   */
  export type SubcontractorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subcontractors to delete
     */
    where?: SubcontractorWhereInput
  }

  /**
   * Subcontractor.packages
   */
  export type Subcontractor$packagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageSubcontractor
     */
    select?: PackageSubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageSubcontractorInclude<ExtArgs> | null
    where?: PackageSubcontractorWhereInput
    orderBy?: PackageSubcontractorOrderByWithRelationInput | PackageSubcontractorOrderByWithRelationInput[]
    cursor?: PackageSubcontractorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageSubcontractorScalarFieldEnum | PackageSubcontractorScalarFieldEnum[]
  }

  /**
   * Subcontractor without action
   */
  export type SubcontractorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcontractor
     */
    select?: SubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcontractorInclude<ExtArgs> | null
  }


  /**
   * Model Package
   */

  export type AggregatePackage = {
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  export type PackageAvgAggregateOutputType = {
    id: number | null
    contractorId: number | null
  }

  export type PackageSumAggregateOutputType = {
    id: number | null
    contractorId: number | null
  }

  export type PackageMinAggregateOutputType = {
    id: number | null
    customerName: string | null
    propertyAddress: string | null
    county: string | null
    permitType: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    contractorId: number | null
  }

  export type PackageMaxAggregateOutputType = {
    id: number | null
    customerName: string | null
    propertyAddress: string | null
    county: string | null
    permitType: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    contractorId: number | null
  }

  export type PackageCountAggregateOutputType = {
    id: number
    customerName: number
    propertyAddress: number
    county: number
    permitType: number
    status: number
    createdAt: number
    updatedAt: number
    contractorId: number
    _all: number
  }


  export type PackageAvgAggregateInputType = {
    id?: true
    contractorId?: true
  }

  export type PackageSumAggregateInputType = {
    id?: true
    contractorId?: true
  }

  export type PackageMinAggregateInputType = {
    id?: true
    customerName?: true
    propertyAddress?: true
    county?: true
    permitType?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    contractorId?: true
  }

  export type PackageMaxAggregateInputType = {
    id?: true
    customerName?: true
    propertyAddress?: true
    county?: true
    permitType?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    contractorId?: true
  }

  export type PackageCountAggregateInputType = {
    id?: true
    customerName?: true
    propertyAddress?: true
    county?: true
    permitType?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    contractorId?: true
    _all?: true
  }

  export type PackageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Package to aggregate.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Packages
    **/
    _count?: true | PackageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageMaxAggregateInputType
  }

  export type GetPackageAggregateType<T extends PackageAggregateArgs> = {
        [P in keyof T & keyof AggregatePackage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackage[P]>
      : GetScalarType<T[P], AggregatePackage[P]>
  }




  export type PackageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithAggregationInput | PackageOrderByWithAggregationInput[]
    by: PackageScalarFieldEnum[] | PackageScalarFieldEnum
    having?: PackageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageCountAggregateInputType | true
    _avg?: PackageAvgAggregateInputType
    _sum?: PackageSumAggregateInputType
    _min?: PackageMinAggregateInputType
    _max?: PackageMaxAggregateInputType
  }

  export type PackageGroupByOutputType = {
    id: number
    customerName: string
    propertyAddress: string
    county: string
    permitType: string
    status: string
    createdAt: Date
    updatedAt: Date
    contractorId: number
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  type GetPackageGroupByPayload<T extends PackageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageGroupByOutputType[P]>
            : GetScalarType<T[P], PackageGroupByOutputType[P]>
        }
      >
    >


  export type PackageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerName?: boolean
    propertyAddress?: boolean
    county?: boolean
    permitType?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contractorId?: boolean
    documents?: boolean | Package$documentsArgs<ExtArgs>
    contractor?: boolean | ContractorDefaultArgs<ExtArgs>
    subcontractors?: boolean | Package$subcontractorsArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerName?: boolean
    propertyAddress?: boolean
    county?: boolean
    permitType?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contractorId?: boolean
    contractor?: boolean | ContractorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectScalar = {
    id?: boolean
    customerName?: boolean
    propertyAddress?: boolean
    county?: boolean
    permitType?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contractorId?: boolean
  }

  export type PackageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | Package$documentsArgs<ExtArgs>
    contractor?: boolean | ContractorDefaultArgs<ExtArgs>
    subcontractors?: boolean | Package$subcontractorsArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PackageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contractor?: boolean | ContractorDefaultArgs<ExtArgs>
  }

  export type $PackagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Package"
    objects: {
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      contractor: Prisma.$ContractorPayload<ExtArgs>
      subcontractors: Prisma.$PackageSubcontractorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      customerName: string
      propertyAddress: string
      county: string
      permitType: string
      status: string
      createdAt: Date
      updatedAt: Date
      contractorId: number
    }, ExtArgs["result"]["package"]>
    composites: {}
  }

  type PackageGetPayload<S extends boolean | null | undefined | PackageDefaultArgs> = $Result.GetResult<Prisma.$PackagePayload, S>

  type PackageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PackageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PackageCountAggregateInputType | true
    }

  export interface PackageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Package'], meta: { name: 'Package' } }
    /**
     * Find zero or one Package that matches the filter.
     * @param {PackageFindUniqueArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackageFindUniqueArgs>(args: SelectSubset<T, PackageFindUniqueArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Package that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PackageFindUniqueOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackageFindUniqueOrThrowArgs>(args: SelectSubset<T, PackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Package that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackageFindFirstArgs>(args?: SelectSubset<T, PackageFindFirstArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Package that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackageFindFirstOrThrowArgs>(args?: SelectSubset<T, PackageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Packages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Packages
     * const packages = await prisma.package.findMany()
     * 
     * // Get first 10 Packages
     * const packages = await prisma.package.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packageWithIdOnly = await prisma.package.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PackageFindManyArgs>(args?: SelectSubset<T, PackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Package.
     * @param {PackageCreateArgs} args - Arguments to create a Package.
     * @example
     * // Create one Package
     * const Package = await prisma.package.create({
     *   data: {
     *     // ... data to create a Package
     *   }
     * })
     * 
     */
    create<T extends PackageCreateArgs>(args: SelectSubset<T, PackageCreateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Packages.
     * @param {PackageCreateManyArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackageCreateManyArgs>(args?: SelectSubset<T, PackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Packages and returns the data saved in the database.
     * @param {PackageCreateManyAndReturnArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Packages and only return the `id`
     * const packageWithIdOnly = await prisma.package.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackageCreateManyAndReturnArgs>(args?: SelectSubset<T, PackageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Package.
     * @param {PackageDeleteArgs} args - Arguments to delete one Package.
     * @example
     * // Delete one Package
     * const Package = await prisma.package.delete({
     *   where: {
     *     // ... filter to delete one Package
     *   }
     * })
     * 
     */
    delete<T extends PackageDeleteArgs>(args: SelectSubset<T, PackageDeleteArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Package.
     * @param {PackageUpdateArgs} args - Arguments to update one Package.
     * @example
     * // Update one Package
     * const package = await prisma.package.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackageUpdateArgs>(args: SelectSubset<T, PackageUpdateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Packages.
     * @param {PackageDeleteManyArgs} args - Arguments to filter Packages to delete.
     * @example
     * // Delete a few Packages
     * const { count } = await prisma.package.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackageDeleteManyArgs>(args?: SelectSubset<T, PackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Packages
     * const package = await prisma.package.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackageUpdateManyArgs>(args: SelectSubset<T, PackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Package.
     * @param {PackageUpsertArgs} args - Arguments to update or create a Package.
     * @example
     * // Update or create a Package
     * const package = await prisma.package.upsert({
     *   create: {
     *     // ... data to create a Package
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Package we want to update
     *   }
     * })
     */
    upsert<T extends PackageUpsertArgs>(args: SelectSubset<T, PackageUpsertArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageCountArgs} args - Arguments to filter Packages to count.
     * @example
     * // Count the number of Packages
     * const count = await prisma.package.count({
     *   where: {
     *     // ... the filter for the Packages we want to count
     *   }
     * })
    **/
    count<T extends PackageCountArgs>(
      args?: Subset<T, PackageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageAggregateArgs>(args: Subset<T, PackageAggregateArgs>): Prisma.PrismaPromise<GetPackageAggregateType<T>>

    /**
     * Group by Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackageGroupByArgs['orderBy'] }
        : { orderBy?: PackageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Package model
   */
  readonly fields: PackageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Package.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documents<T extends Package$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Package$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    contractor<T extends ContractorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractorDefaultArgs<ExtArgs>>): Prisma__ContractorClient<$Result.GetResult<Prisma.$ContractorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    subcontractors<T extends Package$subcontractorsArgs<ExtArgs> = {}>(args?: Subset<T, Package$subcontractorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageSubcontractorPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Package model
   */ 
  interface PackageFieldRefs {
    readonly id: FieldRef<"Package", 'Int'>
    readonly customerName: FieldRef<"Package", 'String'>
    readonly propertyAddress: FieldRef<"Package", 'String'>
    readonly county: FieldRef<"Package", 'String'>
    readonly permitType: FieldRef<"Package", 'String'>
    readonly status: FieldRef<"Package", 'String'>
    readonly createdAt: FieldRef<"Package", 'DateTime'>
    readonly updatedAt: FieldRef<"Package", 'DateTime'>
    readonly contractorId: FieldRef<"Package", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Package findUnique
   */
  export type PackageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findUniqueOrThrow
   */
  export type PackageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findFirst
   */
  export type PackageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findFirstOrThrow
   */
  export type PackageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findMany
   */
  export type PackageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Packages to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package create
   */
  export type PackageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to create a Package.
     */
    data: XOR<PackageCreateInput, PackageUncheckedCreateInput>
  }

  /**
   * Package createMany
   */
  export type PackageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Package createManyAndReturn
   */
  export type PackageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Package update
   */
  export type PackageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to update a Package.
     */
    data: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
    /**
     * Choose, which Package to update.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package updateMany
   */
  export type PackageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Packages.
     */
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyInput>
    /**
     * Filter which Packages to update
     */
    where?: PackageWhereInput
  }

  /**
   * Package upsert
   */
  export type PackageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The filter to search for the Package to update in case it exists.
     */
    where: PackageWhereUniqueInput
    /**
     * In case the Package found by the `where` argument doesn't exist, create a new Package with this data.
     */
    create: XOR<PackageCreateInput, PackageUncheckedCreateInput>
    /**
     * In case the Package was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
  }

  /**
   * Package delete
   */
  export type PackageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter which Package to delete.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package deleteMany
   */
  export type PackageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Packages to delete
     */
    where?: PackageWhereInput
  }

  /**
   * Package.documents
   */
  export type Package$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Package.subcontractors
   */
  export type Package$subcontractorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageSubcontractor
     */
    select?: PackageSubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageSubcontractorInclude<ExtArgs> | null
    where?: PackageSubcontractorWhereInput
    orderBy?: PackageSubcontractorOrderByWithRelationInput | PackageSubcontractorOrderByWithRelationInput[]
    cursor?: PackageSubcontractorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageSubcontractorScalarFieldEnum | PackageSubcontractorScalarFieldEnum[]
  }

  /**
   * Package without action
   */
  export type PackageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
  }


  /**
   * Model PackageSubcontractor
   */

  export type AggregatePackageSubcontractor = {
    _count: PackageSubcontractorCountAggregateOutputType | null
    _avg: PackageSubcontractorAvgAggregateOutputType | null
    _sum: PackageSubcontractorSumAggregateOutputType | null
    _min: PackageSubcontractorMinAggregateOutputType | null
    _max: PackageSubcontractorMaxAggregateOutputType | null
  }

  export type PackageSubcontractorAvgAggregateOutputType = {
    id: number | null
    packageId: number | null
    subcontractorId: number | null
  }

  export type PackageSubcontractorSumAggregateOutputType = {
    id: number | null
    packageId: number | null
    subcontractorId: number | null
  }

  export type PackageSubcontractorMinAggregateOutputType = {
    id: number | null
    packageId: number | null
    subcontractorId: number | null
    tradeType: string | null
    createdAt: Date | null
  }

  export type PackageSubcontractorMaxAggregateOutputType = {
    id: number | null
    packageId: number | null
    subcontractorId: number | null
    tradeType: string | null
    createdAt: Date | null
  }

  export type PackageSubcontractorCountAggregateOutputType = {
    id: number
    packageId: number
    subcontractorId: number
    tradeType: number
    createdAt: number
    _all: number
  }


  export type PackageSubcontractorAvgAggregateInputType = {
    id?: true
    packageId?: true
    subcontractorId?: true
  }

  export type PackageSubcontractorSumAggregateInputType = {
    id?: true
    packageId?: true
    subcontractorId?: true
  }

  export type PackageSubcontractorMinAggregateInputType = {
    id?: true
    packageId?: true
    subcontractorId?: true
    tradeType?: true
    createdAt?: true
  }

  export type PackageSubcontractorMaxAggregateInputType = {
    id?: true
    packageId?: true
    subcontractorId?: true
    tradeType?: true
    createdAt?: true
  }

  export type PackageSubcontractorCountAggregateInputType = {
    id?: true
    packageId?: true
    subcontractorId?: true
    tradeType?: true
    createdAt?: true
    _all?: true
  }

  export type PackageSubcontractorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackageSubcontractor to aggregate.
     */
    where?: PackageSubcontractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageSubcontractors to fetch.
     */
    orderBy?: PackageSubcontractorOrderByWithRelationInput | PackageSubcontractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackageSubcontractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageSubcontractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageSubcontractors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PackageSubcontractors
    **/
    _count?: true | PackageSubcontractorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageSubcontractorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageSubcontractorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageSubcontractorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageSubcontractorMaxAggregateInputType
  }

  export type GetPackageSubcontractorAggregateType<T extends PackageSubcontractorAggregateArgs> = {
        [P in keyof T & keyof AggregatePackageSubcontractor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackageSubcontractor[P]>
      : GetScalarType<T[P], AggregatePackageSubcontractor[P]>
  }




  export type PackageSubcontractorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageSubcontractorWhereInput
    orderBy?: PackageSubcontractorOrderByWithAggregationInput | PackageSubcontractorOrderByWithAggregationInput[]
    by: PackageSubcontractorScalarFieldEnum[] | PackageSubcontractorScalarFieldEnum
    having?: PackageSubcontractorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageSubcontractorCountAggregateInputType | true
    _avg?: PackageSubcontractorAvgAggregateInputType
    _sum?: PackageSubcontractorSumAggregateInputType
    _min?: PackageSubcontractorMinAggregateInputType
    _max?: PackageSubcontractorMaxAggregateInputType
  }

  export type PackageSubcontractorGroupByOutputType = {
    id: number
    packageId: number
    subcontractorId: number
    tradeType: string
    createdAt: Date
    _count: PackageSubcontractorCountAggregateOutputType | null
    _avg: PackageSubcontractorAvgAggregateOutputType | null
    _sum: PackageSubcontractorSumAggregateOutputType | null
    _min: PackageSubcontractorMinAggregateOutputType | null
    _max: PackageSubcontractorMaxAggregateOutputType | null
  }

  type GetPackageSubcontractorGroupByPayload<T extends PackageSubcontractorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageSubcontractorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageSubcontractorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageSubcontractorGroupByOutputType[P]>
            : GetScalarType<T[P], PackageSubcontractorGroupByOutputType[P]>
        }
      >
    >


  export type PackageSubcontractorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packageId?: boolean
    subcontractorId?: boolean
    tradeType?: boolean
    createdAt?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
    subcontractor?: boolean | SubcontractorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packageSubcontractor"]>

  export type PackageSubcontractorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packageId?: boolean
    subcontractorId?: boolean
    tradeType?: boolean
    createdAt?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
    subcontractor?: boolean | SubcontractorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packageSubcontractor"]>

  export type PackageSubcontractorSelectScalar = {
    id?: boolean
    packageId?: boolean
    subcontractorId?: boolean
    tradeType?: boolean
    createdAt?: boolean
  }

  export type PackageSubcontractorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
    subcontractor?: boolean | SubcontractorDefaultArgs<ExtArgs>
  }
  export type PackageSubcontractorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
    subcontractor?: boolean | SubcontractorDefaultArgs<ExtArgs>
  }

  export type $PackageSubcontractorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PackageSubcontractor"
    objects: {
      package: Prisma.$PackagePayload<ExtArgs>
      subcontractor: Prisma.$SubcontractorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      packageId: number
      subcontractorId: number
      tradeType: string
      createdAt: Date
    }, ExtArgs["result"]["packageSubcontractor"]>
    composites: {}
  }

  type PackageSubcontractorGetPayload<S extends boolean | null | undefined | PackageSubcontractorDefaultArgs> = $Result.GetResult<Prisma.$PackageSubcontractorPayload, S>

  type PackageSubcontractorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PackageSubcontractorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PackageSubcontractorCountAggregateInputType | true
    }

  export interface PackageSubcontractorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PackageSubcontractor'], meta: { name: 'PackageSubcontractor' } }
    /**
     * Find zero or one PackageSubcontractor that matches the filter.
     * @param {PackageSubcontractorFindUniqueArgs} args - Arguments to find a PackageSubcontractor
     * @example
     * // Get one PackageSubcontractor
     * const packageSubcontractor = await prisma.packageSubcontractor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackageSubcontractorFindUniqueArgs>(args: SelectSubset<T, PackageSubcontractorFindUniqueArgs<ExtArgs>>): Prisma__PackageSubcontractorClient<$Result.GetResult<Prisma.$PackageSubcontractorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PackageSubcontractor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PackageSubcontractorFindUniqueOrThrowArgs} args - Arguments to find a PackageSubcontractor
     * @example
     * // Get one PackageSubcontractor
     * const packageSubcontractor = await prisma.packageSubcontractor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackageSubcontractorFindUniqueOrThrowArgs>(args: SelectSubset<T, PackageSubcontractorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackageSubcontractorClient<$Result.GetResult<Prisma.$PackageSubcontractorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PackageSubcontractor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageSubcontractorFindFirstArgs} args - Arguments to find a PackageSubcontractor
     * @example
     * // Get one PackageSubcontractor
     * const packageSubcontractor = await prisma.packageSubcontractor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackageSubcontractorFindFirstArgs>(args?: SelectSubset<T, PackageSubcontractorFindFirstArgs<ExtArgs>>): Prisma__PackageSubcontractorClient<$Result.GetResult<Prisma.$PackageSubcontractorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PackageSubcontractor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageSubcontractorFindFirstOrThrowArgs} args - Arguments to find a PackageSubcontractor
     * @example
     * // Get one PackageSubcontractor
     * const packageSubcontractor = await prisma.packageSubcontractor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackageSubcontractorFindFirstOrThrowArgs>(args?: SelectSubset<T, PackageSubcontractorFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackageSubcontractorClient<$Result.GetResult<Prisma.$PackageSubcontractorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PackageSubcontractors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageSubcontractorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PackageSubcontractors
     * const packageSubcontractors = await prisma.packageSubcontractor.findMany()
     * 
     * // Get first 10 PackageSubcontractors
     * const packageSubcontractors = await prisma.packageSubcontractor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packageSubcontractorWithIdOnly = await prisma.packageSubcontractor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PackageSubcontractorFindManyArgs>(args?: SelectSubset<T, PackageSubcontractorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageSubcontractorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PackageSubcontractor.
     * @param {PackageSubcontractorCreateArgs} args - Arguments to create a PackageSubcontractor.
     * @example
     * // Create one PackageSubcontractor
     * const PackageSubcontractor = await prisma.packageSubcontractor.create({
     *   data: {
     *     // ... data to create a PackageSubcontractor
     *   }
     * })
     * 
     */
    create<T extends PackageSubcontractorCreateArgs>(args: SelectSubset<T, PackageSubcontractorCreateArgs<ExtArgs>>): Prisma__PackageSubcontractorClient<$Result.GetResult<Prisma.$PackageSubcontractorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PackageSubcontractors.
     * @param {PackageSubcontractorCreateManyArgs} args - Arguments to create many PackageSubcontractors.
     * @example
     * // Create many PackageSubcontractors
     * const packageSubcontractor = await prisma.packageSubcontractor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackageSubcontractorCreateManyArgs>(args?: SelectSubset<T, PackageSubcontractorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PackageSubcontractors and returns the data saved in the database.
     * @param {PackageSubcontractorCreateManyAndReturnArgs} args - Arguments to create many PackageSubcontractors.
     * @example
     * // Create many PackageSubcontractors
     * const packageSubcontractor = await prisma.packageSubcontractor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PackageSubcontractors and only return the `id`
     * const packageSubcontractorWithIdOnly = await prisma.packageSubcontractor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackageSubcontractorCreateManyAndReturnArgs>(args?: SelectSubset<T, PackageSubcontractorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageSubcontractorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PackageSubcontractor.
     * @param {PackageSubcontractorDeleteArgs} args - Arguments to delete one PackageSubcontractor.
     * @example
     * // Delete one PackageSubcontractor
     * const PackageSubcontractor = await prisma.packageSubcontractor.delete({
     *   where: {
     *     // ... filter to delete one PackageSubcontractor
     *   }
     * })
     * 
     */
    delete<T extends PackageSubcontractorDeleteArgs>(args: SelectSubset<T, PackageSubcontractorDeleteArgs<ExtArgs>>): Prisma__PackageSubcontractorClient<$Result.GetResult<Prisma.$PackageSubcontractorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PackageSubcontractor.
     * @param {PackageSubcontractorUpdateArgs} args - Arguments to update one PackageSubcontractor.
     * @example
     * // Update one PackageSubcontractor
     * const packageSubcontractor = await prisma.packageSubcontractor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackageSubcontractorUpdateArgs>(args: SelectSubset<T, PackageSubcontractorUpdateArgs<ExtArgs>>): Prisma__PackageSubcontractorClient<$Result.GetResult<Prisma.$PackageSubcontractorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PackageSubcontractors.
     * @param {PackageSubcontractorDeleteManyArgs} args - Arguments to filter PackageSubcontractors to delete.
     * @example
     * // Delete a few PackageSubcontractors
     * const { count } = await prisma.packageSubcontractor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackageSubcontractorDeleteManyArgs>(args?: SelectSubset<T, PackageSubcontractorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PackageSubcontractors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageSubcontractorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PackageSubcontractors
     * const packageSubcontractor = await prisma.packageSubcontractor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackageSubcontractorUpdateManyArgs>(args: SelectSubset<T, PackageSubcontractorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PackageSubcontractor.
     * @param {PackageSubcontractorUpsertArgs} args - Arguments to update or create a PackageSubcontractor.
     * @example
     * // Update or create a PackageSubcontractor
     * const packageSubcontractor = await prisma.packageSubcontractor.upsert({
     *   create: {
     *     // ... data to create a PackageSubcontractor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PackageSubcontractor we want to update
     *   }
     * })
     */
    upsert<T extends PackageSubcontractorUpsertArgs>(args: SelectSubset<T, PackageSubcontractorUpsertArgs<ExtArgs>>): Prisma__PackageSubcontractorClient<$Result.GetResult<Prisma.$PackageSubcontractorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PackageSubcontractors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageSubcontractorCountArgs} args - Arguments to filter PackageSubcontractors to count.
     * @example
     * // Count the number of PackageSubcontractors
     * const count = await prisma.packageSubcontractor.count({
     *   where: {
     *     // ... the filter for the PackageSubcontractors we want to count
     *   }
     * })
    **/
    count<T extends PackageSubcontractorCountArgs>(
      args?: Subset<T, PackageSubcontractorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageSubcontractorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PackageSubcontractor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageSubcontractorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageSubcontractorAggregateArgs>(args: Subset<T, PackageSubcontractorAggregateArgs>): Prisma.PrismaPromise<GetPackageSubcontractorAggregateType<T>>

    /**
     * Group by PackageSubcontractor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageSubcontractorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackageSubcontractorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackageSubcontractorGroupByArgs['orderBy'] }
        : { orderBy?: PackageSubcontractorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackageSubcontractorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageSubcontractorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PackageSubcontractor model
   */
  readonly fields: PackageSubcontractorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PackageSubcontractor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackageSubcontractorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    package<T extends PackageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PackageDefaultArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    subcontractor<T extends SubcontractorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubcontractorDefaultArgs<ExtArgs>>): Prisma__SubcontractorClient<$Result.GetResult<Prisma.$SubcontractorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PackageSubcontractor model
   */ 
  interface PackageSubcontractorFieldRefs {
    readonly id: FieldRef<"PackageSubcontractor", 'Int'>
    readonly packageId: FieldRef<"PackageSubcontractor", 'Int'>
    readonly subcontractorId: FieldRef<"PackageSubcontractor", 'Int'>
    readonly tradeType: FieldRef<"PackageSubcontractor", 'String'>
    readonly createdAt: FieldRef<"PackageSubcontractor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PackageSubcontractor findUnique
   */
  export type PackageSubcontractorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageSubcontractor
     */
    select?: PackageSubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageSubcontractorInclude<ExtArgs> | null
    /**
     * Filter, which PackageSubcontractor to fetch.
     */
    where: PackageSubcontractorWhereUniqueInput
  }

  /**
   * PackageSubcontractor findUniqueOrThrow
   */
  export type PackageSubcontractorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageSubcontractor
     */
    select?: PackageSubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageSubcontractorInclude<ExtArgs> | null
    /**
     * Filter, which PackageSubcontractor to fetch.
     */
    where: PackageSubcontractorWhereUniqueInput
  }

  /**
   * PackageSubcontractor findFirst
   */
  export type PackageSubcontractorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageSubcontractor
     */
    select?: PackageSubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageSubcontractorInclude<ExtArgs> | null
    /**
     * Filter, which PackageSubcontractor to fetch.
     */
    where?: PackageSubcontractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageSubcontractors to fetch.
     */
    orderBy?: PackageSubcontractorOrderByWithRelationInput | PackageSubcontractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackageSubcontractors.
     */
    cursor?: PackageSubcontractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageSubcontractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageSubcontractors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackageSubcontractors.
     */
    distinct?: PackageSubcontractorScalarFieldEnum | PackageSubcontractorScalarFieldEnum[]
  }

  /**
   * PackageSubcontractor findFirstOrThrow
   */
  export type PackageSubcontractorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageSubcontractor
     */
    select?: PackageSubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageSubcontractorInclude<ExtArgs> | null
    /**
     * Filter, which PackageSubcontractor to fetch.
     */
    where?: PackageSubcontractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageSubcontractors to fetch.
     */
    orderBy?: PackageSubcontractorOrderByWithRelationInput | PackageSubcontractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackageSubcontractors.
     */
    cursor?: PackageSubcontractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageSubcontractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageSubcontractors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackageSubcontractors.
     */
    distinct?: PackageSubcontractorScalarFieldEnum | PackageSubcontractorScalarFieldEnum[]
  }

  /**
   * PackageSubcontractor findMany
   */
  export type PackageSubcontractorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageSubcontractor
     */
    select?: PackageSubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageSubcontractorInclude<ExtArgs> | null
    /**
     * Filter, which PackageSubcontractors to fetch.
     */
    where?: PackageSubcontractorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageSubcontractors to fetch.
     */
    orderBy?: PackageSubcontractorOrderByWithRelationInput | PackageSubcontractorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PackageSubcontractors.
     */
    cursor?: PackageSubcontractorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageSubcontractors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageSubcontractors.
     */
    skip?: number
    distinct?: PackageSubcontractorScalarFieldEnum | PackageSubcontractorScalarFieldEnum[]
  }

  /**
   * PackageSubcontractor create
   */
  export type PackageSubcontractorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageSubcontractor
     */
    select?: PackageSubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageSubcontractorInclude<ExtArgs> | null
    /**
     * The data needed to create a PackageSubcontractor.
     */
    data: XOR<PackageSubcontractorCreateInput, PackageSubcontractorUncheckedCreateInput>
  }

  /**
   * PackageSubcontractor createMany
   */
  export type PackageSubcontractorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PackageSubcontractors.
     */
    data: PackageSubcontractorCreateManyInput | PackageSubcontractorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PackageSubcontractor createManyAndReturn
   */
  export type PackageSubcontractorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageSubcontractor
     */
    select?: PackageSubcontractorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PackageSubcontractors.
     */
    data: PackageSubcontractorCreateManyInput | PackageSubcontractorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageSubcontractorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PackageSubcontractor update
   */
  export type PackageSubcontractorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageSubcontractor
     */
    select?: PackageSubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageSubcontractorInclude<ExtArgs> | null
    /**
     * The data needed to update a PackageSubcontractor.
     */
    data: XOR<PackageSubcontractorUpdateInput, PackageSubcontractorUncheckedUpdateInput>
    /**
     * Choose, which PackageSubcontractor to update.
     */
    where: PackageSubcontractorWhereUniqueInput
  }

  /**
   * PackageSubcontractor updateMany
   */
  export type PackageSubcontractorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PackageSubcontractors.
     */
    data: XOR<PackageSubcontractorUpdateManyMutationInput, PackageSubcontractorUncheckedUpdateManyInput>
    /**
     * Filter which PackageSubcontractors to update
     */
    where?: PackageSubcontractorWhereInput
  }

  /**
   * PackageSubcontractor upsert
   */
  export type PackageSubcontractorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageSubcontractor
     */
    select?: PackageSubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageSubcontractorInclude<ExtArgs> | null
    /**
     * The filter to search for the PackageSubcontractor to update in case it exists.
     */
    where: PackageSubcontractorWhereUniqueInput
    /**
     * In case the PackageSubcontractor found by the `where` argument doesn't exist, create a new PackageSubcontractor with this data.
     */
    create: XOR<PackageSubcontractorCreateInput, PackageSubcontractorUncheckedCreateInput>
    /**
     * In case the PackageSubcontractor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackageSubcontractorUpdateInput, PackageSubcontractorUncheckedUpdateInput>
  }

  /**
   * PackageSubcontractor delete
   */
  export type PackageSubcontractorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageSubcontractor
     */
    select?: PackageSubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageSubcontractorInclude<ExtArgs> | null
    /**
     * Filter which PackageSubcontractor to delete.
     */
    where: PackageSubcontractorWhereUniqueInput
  }

  /**
   * PackageSubcontractor deleteMany
   */
  export type PackageSubcontractorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackageSubcontractors to delete
     */
    where?: PackageSubcontractorWhereInput
  }

  /**
   * PackageSubcontractor without action
   */
  export type PackageSubcontractorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageSubcontractor
     */
    select?: PackageSubcontractorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageSubcontractorInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    id: number | null
    packageId: number | null
  }

  export type DocumentSumAggregateOutputType = {
    id: number | null
    packageId: number | null
  }

  export type DocumentMinAggregateOutputType = {
    id: number | null
    fileName: string | null
    filePath: string | null
    uploadedAt: Date | null
    uploaderName: string | null
    version: string | null
    packageId: number | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: number | null
    fileName: string | null
    filePath: string | null
    uploadedAt: Date | null
    uploaderName: string | null
    version: string | null
    packageId: number | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    fileName: number
    filePath: number
    uploadedAt: number
    uploaderName: number
    version: number
    packageId: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    id?: true
    packageId?: true
  }

  export type DocumentSumAggregateInputType = {
    id?: true
    packageId?: true
  }

  export type DocumentMinAggregateInputType = {
    id?: true
    fileName?: true
    filePath?: true
    uploadedAt?: true
    uploaderName?: true
    version?: true
    packageId?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    fileName?: true
    filePath?: true
    uploadedAt?: true
    uploaderName?: true
    version?: true
    packageId?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    fileName?: true
    filePath?: true
    uploadedAt?: true
    uploaderName?: true
    version?: true
    packageId?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: number
    fileName: string
    filePath: string
    uploadedAt: Date
    uploaderName: string
    version: string
    packageId: number
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    uploaderName?: boolean
    version?: boolean
    packageId?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    uploaderName?: boolean
    version?: boolean
    packageId?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    fileName?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    uploaderName?: boolean
    version?: boolean
    packageId?: boolean
  }

  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      package: Prisma.$PackagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fileName: string
      filePath: string
      uploadedAt: Date
      uploaderName: string
      version: string
      packageId: number
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    package<T extends PackageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PackageDefaultArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */ 
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'Int'>
    readonly fileName: FieldRef<"Document", 'String'>
    readonly filePath: FieldRef<"Document", 'String'>
    readonly uploadedAt: FieldRef<"Document", 'DateTime'>
    readonly uploaderName: FieldRef<"Document", 'String'>
    readonly version: FieldRef<"Document", 'String'>
    readonly packageId: FieldRef<"Document", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ContractorScalarFieldEnum: {
    id: 'id',
    companyName: 'companyName',
    licenseNumber: 'licenseNumber',
    address: 'address',
    phoneNumber: 'phoneNumber',
    email: 'email',
    contactPerson: 'contactPerson',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContractorScalarFieldEnum = (typeof ContractorScalarFieldEnum)[keyof typeof ContractorScalarFieldEnum]


  export const SubcontractorScalarFieldEnum: {
    id: 'id',
    companyName: 'companyName',
    licenseNumber: 'licenseNumber',
    address: 'address',
    phoneNumber: 'phoneNumber',
    email: 'email',
    contactPerson: 'contactPerson',
    tradeType: 'tradeType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    contractorId: 'contractorId'
  };

  export type SubcontractorScalarFieldEnum = (typeof SubcontractorScalarFieldEnum)[keyof typeof SubcontractorScalarFieldEnum]


  export const PackageScalarFieldEnum: {
    id: 'id',
    customerName: 'customerName',
    propertyAddress: 'propertyAddress',
    county: 'county',
    permitType: 'permitType',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    contractorId: 'contractorId'
  };

  export type PackageScalarFieldEnum = (typeof PackageScalarFieldEnum)[keyof typeof PackageScalarFieldEnum]


  export const PackageSubcontractorScalarFieldEnum: {
    id: 'id',
    packageId: 'packageId',
    subcontractorId: 'subcontractorId',
    tradeType: 'tradeType',
    createdAt: 'createdAt'
  };

  export type PackageSubcontractorScalarFieldEnum = (typeof PackageSubcontractorScalarFieldEnum)[keyof typeof PackageSubcontractorScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    fileName: 'fileName',
    filePath: 'filePath',
    uploadedAt: 'uploadedAt',
    uploaderName: 'uploaderName',
    version: 'version',
    packageId: 'packageId'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
  }

  export type ContractorWhereInput = {
    AND?: ContractorWhereInput | ContractorWhereInput[]
    OR?: ContractorWhereInput[]
    NOT?: ContractorWhereInput | ContractorWhereInput[]
    id?: IntFilter<"Contractor"> | number
    companyName?: StringFilter<"Contractor"> | string
    licenseNumber?: StringFilter<"Contractor"> | string
    address?: StringFilter<"Contractor"> | string
    phoneNumber?: StringFilter<"Contractor"> | string
    email?: StringNullableFilter<"Contractor"> | string | null
    contactPerson?: StringNullableFilter<"Contractor"> | string | null
    createdAt?: DateTimeFilter<"Contractor"> | Date | string
    updatedAt?: DateTimeFilter<"Contractor"> | Date | string
    packages?: PackageListRelationFilter
    subcontractors?: SubcontractorListRelationFilter
  }

  export type ContractorOrderByWithRelationInput = {
    id?: SortOrder
    companyName?: SortOrder
    licenseNumber?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrderInput | SortOrder
    contactPerson?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    packages?: PackageOrderByRelationAggregateInput
    subcontractors?: SubcontractorOrderByRelationAggregateInput
  }

  export type ContractorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    licenseNumber?: string
    AND?: ContractorWhereInput | ContractorWhereInput[]
    OR?: ContractorWhereInput[]
    NOT?: ContractorWhereInput | ContractorWhereInput[]
    companyName?: StringFilter<"Contractor"> | string
    address?: StringFilter<"Contractor"> | string
    phoneNumber?: StringFilter<"Contractor"> | string
    email?: StringNullableFilter<"Contractor"> | string | null
    contactPerson?: StringNullableFilter<"Contractor"> | string | null
    createdAt?: DateTimeFilter<"Contractor"> | Date | string
    updatedAt?: DateTimeFilter<"Contractor"> | Date | string
    packages?: PackageListRelationFilter
    subcontractors?: SubcontractorListRelationFilter
  }, "id" | "licenseNumber">

  export type ContractorOrderByWithAggregationInput = {
    id?: SortOrder
    companyName?: SortOrder
    licenseNumber?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrderInput | SortOrder
    contactPerson?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContractorCountOrderByAggregateInput
    _avg?: ContractorAvgOrderByAggregateInput
    _max?: ContractorMaxOrderByAggregateInput
    _min?: ContractorMinOrderByAggregateInput
    _sum?: ContractorSumOrderByAggregateInput
  }

  export type ContractorScalarWhereWithAggregatesInput = {
    AND?: ContractorScalarWhereWithAggregatesInput | ContractorScalarWhereWithAggregatesInput[]
    OR?: ContractorScalarWhereWithAggregatesInput[]
    NOT?: ContractorScalarWhereWithAggregatesInput | ContractorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Contractor"> | number
    companyName?: StringWithAggregatesFilter<"Contractor"> | string
    licenseNumber?: StringWithAggregatesFilter<"Contractor"> | string
    address?: StringWithAggregatesFilter<"Contractor"> | string
    phoneNumber?: StringWithAggregatesFilter<"Contractor"> | string
    email?: StringNullableWithAggregatesFilter<"Contractor"> | string | null
    contactPerson?: StringNullableWithAggregatesFilter<"Contractor"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Contractor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contractor"> | Date | string
  }

  export type SubcontractorWhereInput = {
    AND?: SubcontractorWhereInput | SubcontractorWhereInput[]
    OR?: SubcontractorWhereInput[]
    NOT?: SubcontractorWhereInput | SubcontractorWhereInput[]
    id?: IntFilter<"Subcontractor"> | number
    companyName?: StringFilter<"Subcontractor"> | string
    licenseNumber?: StringNullableFilter<"Subcontractor"> | string | null
    address?: StringNullableFilter<"Subcontractor"> | string | null
    phoneNumber?: StringNullableFilter<"Subcontractor"> | string | null
    email?: StringNullableFilter<"Subcontractor"> | string | null
    contactPerson?: StringNullableFilter<"Subcontractor"> | string | null
    tradeType?: StringFilter<"Subcontractor"> | string
    createdAt?: DateTimeFilter<"Subcontractor"> | Date | string
    updatedAt?: DateTimeFilter<"Subcontractor"> | Date | string
    contractorId?: IntFilter<"Subcontractor"> | number
    contractor?: XOR<ContractorRelationFilter, ContractorWhereInput>
    packages?: PackageSubcontractorListRelationFilter
  }

  export type SubcontractorOrderByWithRelationInput = {
    id?: SortOrder
    companyName?: SortOrder
    licenseNumber?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    contactPerson?: SortOrderInput | SortOrder
    tradeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contractorId?: SortOrder
    contractor?: ContractorOrderByWithRelationInput
    packages?: PackageSubcontractorOrderByRelationAggregateInput
  }

  export type SubcontractorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubcontractorWhereInput | SubcontractorWhereInput[]
    OR?: SubcontractorWhereInput[]
    NOT?: SubcontractorWhereInput | SubcontractorWhereInput[]
    companyName?: StringFilter<"Subcontractor"> | string
    licenseNumber?: StringNullableFilter<"Subcontractor"> | string | null
    address?: StringNullableFilter<"Subcontractor"> | string | null
    phoneNumber?: StringNullableFilter<"Subcontractor"> | string | null
    email?: StringNullableFilter<"Subcontractor"> | string | null
    contactPerson?: StringNullableFilter<"Subcontractor"> | string | null
    tradeType?: StringFilter<"Subcontractor"> | string
    createdAt?: DateTimeFilter<"Subcontractor"> | Date | string
    updatedAt?: DateTimeFilter<"Subcontractor"> | Date | string
    contractorId?: IntFilter<"Subcontractor"> | number
    contractor?: XOR<ContractorRelationFilter, ContractorWhereInput>
    packages?: PackageSubcontractorListRelationFilter
  }, "id">

  export type SubcontractorOrderByWithAggregationInput = {
    id?: SortOrder
    companyName?: SortOrder
    licenseNumber?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    contactPerson?: SortOrderInput | SortOrder
    tradeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contractorId?: SortOrder
    _count?: SubcontractorCountOrderByAggregateInput
    _avg?: SubcontractorAvgOrderByAggregateInput
    _max?: SubcontractorMaxOrderByAggregateInput
    _min?: SubcontractorMinOrderByAggregateInput
    _sum?: SubcontractorSumOrderByAggregateInput
  }

  export type SubcontractorScalarWhereWithAggregatesInput = {
    AND?: SubcontractorScalarWhereWithAggregatesInput | SubcontractorScalarWhereWithAggregatesInput[]
    OR?: SubcontractorScalarWhereWithAggregatesInput[]
    NOT?: SubcontractorScalarWhereWithAggregatesInput | SubcontractorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subcontractor"> | number
    companyName?: StringWithAggregatesFilter<"Subcontractor"> | string
    licenseNumber?: StringNullableWithAggregatesFilter<"Subcontractor"> | string | null
    address?: StringNullableWithAggregatesFilter<"Subcontractor"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"Subcontractor"> | string | null
    email?: StringNullableWithAggregatesFilter<"Subcontractor"> | string | null
    contactPerson?: StringNullableWithAggregatesFilter<"Subcontractor"> | string | null
    tradeType?: StringWithAggregatesFilter<"Subcontractor"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Subcontractor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subcontractor"> | Date | string
    contractorId?: IntWithAggregatesFilter<"Subcontractor"> | number
  }

  export type PackageWhereInput = {
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    id?: IntFilter<"Package"> | number
    customerName?: StringFilter<"Package"> | string
    propertyAddress?: StringFilter<"Package"> | string
    county?: StringFilter<"Package"> | string
    permitType?: StringFilter<"Package"> | string
    status?: StringFilter<"Package"> | string
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
    contractorId?: IntFilter<"Package"> | number
    documents?: DocumentListRelationFilter
    contractor?: XOR<ContractorRelationFilter, ContractorWhereInput>
    subcontractors?: PackageSubcontractorListRelationFilter
  }

  export type PackageOrderByWithRelationInput = {
    id?: SortOrder
    customerName?: SortOrder
    propertyAddress?: SortOrder
    county?: SortOrder
    permitType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contractorId?: SortOrder
    documents?: DocumentOrderByRelationAggregateInput
    contractor?: ContractorOrderByWithRelationInput
    subcontractors?: PackageSubcontractorOrderByRelationAggregateInput
  }

  export type PackageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    customerName?: StringFilter<"Package"> | string
    propertyAddress?: StringFilter<"Package"> | string
    county?: StringFilter<"Package"> | string
    permitType?: StringFilter<"Package"> | string
    status?: StringFilter<"Package"> | string
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
    contractorId?: IntFilter<"Package"> | number
    documents?: DocumentListRelationFilter
    contractor?: XOR<ContractorRelationFilter, ContractorWhereInput>
    subcontractors?: PackageSubcontractorListRelationFilter
  }, "id">

  export type PackageOrderByWithAggregationInput = {
    id?: SortOrder
    customerName?: SortOrder
    propertyAddress?: SortOrder
    county?: SortOrder
    permitType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contractorId?: SortOrder
    _count?: PackageCountOrderByAggregateInput
    _avg?: PackageAvgOrderByAggregateInput
    _max?: PackageMaxOrderByAggregateInput
    _min?: PackageMinOrderByAggregateInput
    _sum?: PackageSumOrderByAggregateInput
  }

  export type PackageScalarWhereWithAggregatesInput = {
    AND?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    OR?: PackageScalarWhereWithAggregatesInput[]
    NOT?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Package"> | number
    customerName?: StringWithAggregatesFilter<"Package"> | string
    propertyAddress?: StringWithAggregatesFilter<"Package"> | string
    county?: StringWithAggregatesFilter<"Package"> | string
    permitType?: StringWithAggregatesFilter<"Package"> | string
    status?: StringWithAggregatesFilter<"Package"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Package"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Package"> | Date | string
    contractorId?: IntWithAggregatesFilter<"Package"> | number
  }

  export type PackageSubcontractorWhereInput = {
    AND?: PackageSubcontractorWhereInput | PackageSubcontractorWhereInput[]
    OR?: PackageSubcontractorWhereInput[]
    NOT?: PackageSubcontractorWhereInput | PackageSubcontractorWhereInput[]
    id?: IntFilter<"PackageSubcontractor"> | number
    packageId?: IntFilter<"PackageSubcontractor"> | number
    subcontractorId?: IntFilter<"PackageSubcontractor"> | number
    tradeType?: StringFilter<"PackageSubcontractor"> | string
    createdAt?: DateTimeFilter<"PackageSubcontractor"> | Date | string
    package?: XOR<PackageRelationFilter, PackageWhereInput>
    subcontractor?: XOR<SubcontractorRelationFilter, SubcontractorWhereInput>
  }

  export type PackageSubcontractorOrderByWithRelationInput = {
    id?: SortOrder
    packageId?: SortOrder
    subcontractorId?: SortOrder
    tradeType?: SortOrder
    createdAt?: SortOrder
    package?: PackageOrderByWithRelationInput
    subcontractor?: SubcontractorOrderByWithRelationInput
  }

  export type PackageSubcontractorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    packageId_subcontractorId?: PackageSubcontractorPackageIdSubcontractorIdCompoundUniqueInput
    AND?: PackageSubcontractorWhereInput | PackageSubcontractorWhereInput[]
    OR?: PackageSubcontractorWhereInput[]
    NOT?: PackageSubcontractorWhereInput | PackageSubcontractorWhereInput[]
    packageId?: IntFilter<"PackageSubcontractor"> | number
    subcontractorId?: IntFilter<"PackageSubcontractor"> | number
    tradeType?: StringFilter<"PackageSubcontractor"> | string
    createdAt?: DateTimeFilter<"PackageSubcontractor"> | Date | string
    package?: XOR<PackageRelationFilter, PackageWhereInput>
    subcontractor?: XOR<SubcontractorRelationFilter, SubcontractorWhereInput>
  }, "id" | "packageId_subcontractorId">

  export type PackageSubcontractorOrderByWithAggregationInput = {
    id?: SortOrder
    packageId?: SortOrder
    subcontractorId?: SortOrder
    tradeType?: SortOrder
    createdAt?: SortOrder
    _count?: PackageSubcontractorCountOrderByAggregateInput
    _avg?: PackageSubcontractorAvgOrderByAggregateInput
    _max?: PackageSubcontractorMaxOrderByAggregateInput
    _min?: PackageSubcontractorMinOrderByAggregateInput
    _sum?: PackageSubcontractorSumOrderByAggregateInput
  }

  export type PackageSubcontractorScalarWhereWithAggregatesInput = {
    AND?: PackageSubcontractorScalarWhereWithAggregatesInput | PackageSubcontractorScalarWhereWithAggregatesInput[]
    OR?: PackageSubcontractorScalarWhereWithAggregatesInput[]
    NOT?: PackageSubcontractorScalarWhereWithAggregatesInput | PackageSubcontractorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PackageSubcontractor"> | number
    packageId?: IntWithAggregatesFilter<"PackageSubcontractor"> | number
    subcontractorId?: IntWithAggregatesFilter<"PackageSubcontractor"> | number
    tradeType?: StringWithAggregatesFilter<"PackageSubcontractor"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PackageSubcontractor"> | Date | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: IntFilter<"Document"> | number
    fileName?: StringFilter<"Document"> | string
    filePath?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
    uploaderName?: StringFilter<"Document"> | string
    version?: StringFilter<"Document"> | string
    packageId?: IntFilter<"Document"> | number
    package?: XOR<PackageRelationFilter, PackageWhereInput>
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    uploaderName?: SortOrder
    version?: SortOrder
    packageId?: SortOrder
    package?: PackageOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    fileName?: StringFilter<"Document"> | string
    filePath?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
    uploaderName?: StringFilter<"Document"> | string
    version?: StringFilter<"Document"> | string
    packageId?: IntFilter<"Document"> | number
    package?: XOR<PackageRelationFilter, PackageWhereInput>
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    uploaderName?: SortOrder
    version?: SortOrder
    packageId?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Document"> | number
    fileName?: StringWithAggregatesFilter<"Document"> | string
    filePath?: StringWithAggregatesFilter<"Document"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    uploaderName?: StringWithAggregatesFilter<"Document"> | string
    version?: StringWithAggregatesFilter<"Document"> | string
    packageId?: IntWithAggregatesFilter<"Document"> | number
  }

  export type UserCreateInput = {
    email: string
    name: string
    role: string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    role: string
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name: string
    role: string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type ContractorCreateInput = {
    companyName: string
    licenseNumber: string
    address: string
    phoneNumber: string
    email?: string | null
    contactPerson?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageCreateNestedManyWithoutContractorInput
    subcontractors?: SubcontractorCreateNestedManyWithoutContractorInput
  }

  export type ContractorUncheckedCreateInput = {
    id?: number
    companyName: string
    licenseNumber: string
    address: string
    phoneNumber: string
    email?: string | null
    contactPerson?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageUncheckedCreateNestedManyWithoutContractorInput
    subcontractors?: SubcontractorUncheckedCreateNestedManyWithoutContractorInput
  }

  export type ContractorUpdateInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageUpdateManyWithoutContractorNestedInput
    subcontractors?: SubcontractorUpdateManyWithoutContractorNestedInput
  }

  export type ContractorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageUncheckedUpdateManyWithoutContractorNestedInput
    subcontractors?: SubcontractorUncheckedUpdateManyWithoutContractorNestedInput
  }

  export type ContractorCreateManyInput = {
    id?: number
    companyName: string
    licenseNumber: string
    address: string
    phoneNumber: string
    email?: string | null
    contactPerson?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractorUpdateManyMutationInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubcontractorCreateInput = {
    companyName: string
    licenseNumber?: string | null
    address?: string | null
    phoneNumber?: string | null
    email?: string | null
    contactPerson?: string | null
    tradeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contractor: ContractorCreateNestedOneWithoutSubcontractorsInput
    packages?: PackageSubcontractorCreateNestedManyWithoutSubcontractorInput
  }

  export type SubcontractorUncheckedCreateInput = {
    id?: number
    companyName: string
    licenseNumber?: string | null
    address?: string | null
    phoneNumber?: string | null
    email?: string | null
    contactPerson?: string | null
    tradeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorId: number
    packages?: PackageSubcontractorUncheckedCreateNestedManyWithoutSubcontractorInput
  }

  export type SubcontractorUpdateInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractor?: ContractorUpdateOneRequiredWithoutSubcontractorsNestedInput
    packages?: PackageSubcontractorUpdateManyWithoutSubcontractorNestedInput
  }

  export type SubcontractorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorId?: IntFieldUpdateOperationsInput | number
    packages?: PackageSubcontractorUncheckedUpdateManyWithoutSubcontractorNestedInput
  }

  export type SubcontractorCreateManyInput = {
    id?: number
    companyName: string
    licenseNumber?: string | null
    address?: string | null
    phoneNumber?: string | null
    email?: string | null
    contactPerson?: string | null
    tradeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorId: number
  }

  export type SubcontractorUpdateManyMutationInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubcontractorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorId?: IntFieldUpdateOperationsInput | number
  }

  export type PackageCreateInput = {
    customerName: string
    propertyAddress: string
    county: string
    permitType?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentCreateNestedManyWithoutPackageInput
    contractor: ContractorCreateNestedOneWithoutPackagesInput
    subcontractors?: PackageSubcontractorCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateInput = {
    id?: number
    customerName: string
    propertyAddress: string
    county: string
    permitType?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorId: number
    documents?: DocumentUncheckedCreateNestedManyWithoutPackageInput
    subcontractors?: PackageSubcontractorUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageUpdateInput = {
    customerName?: StringFieldUpdateOperationsInput | string
    propertyAddress?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    permitType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUpdateManyWithoutPackageNestedInput
    contractor?: ContractorUpdateOneRequiredWithoutPackagesNestedInput
    subcontractors?: PackageSubcontractorUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    propertyAddress?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    permitType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorId?: IntFieldUpdateOperationsInput | number
    documents?: DocumentUncheckedUpdateManyWithoutPackageNestedInput
    subcontractors?: PackageSubcontractorUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageCreateManyInput = {
    id?: number
    customerName: string
    propertyAddress: string
    county: string
    permitType?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorId: number
  }

  export type PackageUpdateManyMutationInput = {
    customerName?: StringFieldUpdateOperationsInput | string
    propertyAddress?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    permitType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    propertyAddress?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    permitType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorId?: IntFieldUpdateOperationsInput | number
  }

  export type PackageSubcontractorCreateInput = {
    tradeType: string
    createdAt?: Date | string
    package: PackageCreateNestedOneWithoutSubcontractorsInput
    subcontractor: SubcontractorCreateNestedOneWithoutPackagesInput
  }

  export type PackageSubcontractorUncheckedCreateInput = {
    id?: number
    packageId: number
    subcontractorId: number
    tradeType: string
    createdAt?: Date | string
  }

  export type PackageSubcontractorUpdateInput = {
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: PackageUpdateOneRequiredWithoutSubcontractorsNestedInput
    subcontractor?: SubcontractorUpdateOneRequiredWithoutPackagesNestedInput
  }

  export type PackageSubcontractorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    subcontractorId?: IntFieldUpdateOperationsInput | number
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageSubcontractorCreateManyInput = {
    id?: number
    packageId: number
    subcontractorId: number
    tradeType: string
    createdAt?: Date | string
  }

  export type PackageSubcontractorUpdateManyMutationInput = {
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageSubcontractorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    subcontractorId?: IntFieldUpdateOperationsInput | number
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateInput = {
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    uploaderName: string
    version?: string
    package: PackageCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: number
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    uploaderName: string
    version?: string
    packageId: number
  }

  export type DocumentUpdateInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploaderName?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    package?: PackageUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploaderName?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    packageId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentCreateManyInput = {
    id?: number
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    uploaderName: string
    version?: string
    packageId: number
  }

  export type DocumentUpdateManyMutationInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploaderName?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploaderName?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    packageId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PackageListRelationFilter = {
    every?: PackageWhereInput
    some?: PackageWhereInput
    none?: PackageWhereInput
  }

  export type SubcontractorListRelationFilter = {
    every?: SubcontractorWhereInput
    some?: SubcontractorWhereInput
    none?: SubcontractorWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PackageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubcontractorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContractorCountOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    licenseNumber?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    contactPerson?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContractorMaxOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    licenseNumber?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    contactPerson?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractorMinOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    licenseNumber?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    contactPerson?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ContractorRelationFilter = {
    is?: ContractorWhereInput
    isNot?: ContractorWhereInput
  }

  export type PackageSubcontractorListRelationFilter = {
    every?: PackageSubcontractorWhereInput
    some?: PackageSubcontractorWhereInput
    none?: PackageSubcontractorWhereInput
  }

  export type PackageSubcontractorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubcontractorCountOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    licenseNumber?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    contactPerson?: SortOrder
    tradeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contractorId?: SortOrder
  }

  export type SubcontractorAvgOrderByAggregateInput = {
    id?: SortOrder
    contractorId?: SortOrder
  }

  export type SubcontractorMaxOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    licenseNumber?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    contactPerson?: SortOrder
    tradeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contractorId?: SortOrder
  }

  export type SubcontractorMinOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    licenseNumber?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    contactPerson?: SortOrder
    tradeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contractorId?: SortOrder
  }

  export type SubcontractorSumOrderByAggregateInput = {
    id?: SortOrder
    contractorId?: SortOrder
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PackageCountOrderByAggregateInput = {
    id?: SortOrder
    customerName?: SortOrder
    propertyAddress?: SortOrder
    county?: SortOrder
    permitType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contractorId?: SortOrder
  }

  export type PackageAvgOrderByAggregateInput = {
    id?: SortOrder
    contractorId?: SortOrder
  }

  export type PackageMaxOrderByAggregateInput = {
    id?: SortOrder
    customerName?: SortOrder
    propertyAddress?: SortOrder
    county?: SortOrder
    permitType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contractorId?: SortOrder
  }

  export type PackageMinOrderByAggregateInput = {
    id?: SortOrder
    customerName?: SortOrder
    propertyAddress?: SortOrder
    county?: SortOrder
    permitType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contractorId?: SortOrder
  }

  export type PackageSumOrderByAggregateInput = {
    id?: SortOrder
    contractorId?: SortOrder
  }

  export type PackageRelationFilter = {
    is?: PackageWhereInput
    isNot?: PackageWhereInput
  }

  export type SubcontractorRelationFilter = {
    is?: SubcontractorWhereInput
    isNot?: SubcontractorWhereInput
  }

  export type PackageSubcontractorPackageIdSubcontractorIdCompoundUniqueInput = {
    packageId: number
    subcontractorId: number
  }

  export type PackageSubcontractorCountOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    subcontractorId?: SortOrder
    tradeType?: SortOrder
    createdAt?: SortOrder
  }

  export type PackageSubcontractorAvgOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    subcontractorId?: SortOrder
  }

  export type PackageSubcontractorMaxOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    subcontractorId?: SortOrder
    tradeType?: SortOrder
    createdAt?: SortOrder
  }

  export type PackageSubcontractorMinOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    subcontractorId?: SortOrder
    tradeType?: SortOrder
    createdAt?: SortOrder
  }

  export type PackageSubcontractorSumOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    subcontractorId?: SortOrder
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    uploaderName?: SortOrder
    version?: SortOrder
    packageId?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    uploaderName?: SortOrder
    version?: SortOrder
    packageId?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    uploaderName?: SortOrder
    version?: SortOrder
    packageId?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PackageCreateNestedManyWithoutContractorInput = {
    create?: XOR<PackageCreateWithoutContractorInput, PackageUncheckedCreateWithoutContractorInput> | PackageCreateWithoutContractorInput[] | PackageUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutContractorInput | PackageCreateOrConnectWithoutContractorInput[]
    createMany?: PackageCreateManyContractorInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type SubcontractorCreateNestedManyWithoutContractorInput = {
    create?: XOR<SubcontractorCreateWithoutContractorInput, SubcontractorUncheckedCreateWithoutContractorInput> | SubcontractorCreateWithoutContractorInput[] | SubcontractorUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: SubcontractorCreateOrConnectWithoutContractorInput | SubcontractorCreateOrConnectWithoutContractorInput[]
    createMany?: SubcontractorCreateManyContractorInputEnvelope
    connect?: SubcontractorWhereUniqueInput | SubcontractorWhereUniqueInput[]
  }

  export type PackageUncheckedCreateNestedManyWithoutContractorInput = {
    create?: XOR<PackageCreateWithoutContractorInput, PackageUncheckedCreateWithoutContractorInput> | PackageCreateWithoutContractorInput[] | PackageUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutContractorInput | PackageCreateOrConnectWithoutContractorInput[]
    createMany?: PackageCreateManyContractorInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type SubcontractorUncheckedCreateNestedManyWithoutContractorInput = {
    create?: XOR<SubcontractorCreateWithoutContractorInput, SubcontractorUncheckedCreateWithoutContractorInput> | SubcontractorCreateWithoutContractorInput[] | SubcontractorUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: SubcontractorCreateOrConnectWithoutContractorInput | SubcontractorCreateOrConnectWithoutContractorInput[]
    createMany?: SubcontractorCreateManyContractorInputEnvelope
    connect?: SubcontractorWhereUniqueInput | SubcontractorWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PackageUpdateManyWithoutContractorNestedInput = {
    create?: XOR<PackageCreateWithoutContractorInput, PackageUncheckedCreateWithoutContractorInput> | PackageCreateWithoutContractorInput[] | PackageUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutContractorInput | PackageCreateOrConnectWithoutContractorInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutContractorInput | PackageUpsertWithWhereUniqueWithoutContractorInput[]
    createMany?: PackageCreateManyContractorInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutContractorInput | PackageUpdateWithWhereUniqueWithoutContractorInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutContractorInput | PackageUpdateManyWithWhereWithoutContractorInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type SubcontractorUpdateManyWithoutContractorNestedInput = {
    create?: XOR<SubcontractorCreateWithoutContractorInput, SubcontractorUncheckedCreateWithoutContractorInput> | SubcontractorCreateWithoutContractorInput[] | SubcontractorUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: SubcontractorCreateOrConnectWithoutContractorInput | SubcontractorCreateOrConnectWithoutContractorInput[]
    upsert?: SubcontractorUpsertWithWhereUniqueWithoutContractorInput | SubcontractorUpsertWithWhereUniqueWithoutContractorInput[]
    createMany?: SubcontractorCreateManyContractorInputEnvelope
    set?: SubcontractorWhereUniqueInput | SubcontractorWhereUniqueInput[]
    disconnect?: SubcontractorWhereUniqueInput | SubcontractorWhereUniqueInput[]
    delete?: SubcontractorWhereUniqueInput | SubcontractorWhereUniqueInput[]
    connect?: SubcontractorWhereUniqueInput | SubcontractorWhereUniqueInput[]
    update?: SubcontractorUpdateWithWhereUniqueWithoutContractorInput | SubcontractorUpdateWithWhereUniqueWithoutContractorInput[]
    updateMany?: SubcontractorUpdateManyWithWhereWithoutContractorInput | SubcontractorUpdateManyWithWhereWithoutContractorInput[]
    deleteMany?: SubcontractorScalarWhereInput | SubcontractorScalarWhereInput[]
  }

  export type PackageUncheckedUpdateManyWithoutContractorNestedInput = {
    create?: XOR<PackageCreateWithoutContractorInput, PackageUncheckedCreateWithoutContractorInput> | PackageCreateWithoutContractorInput[] | PackageUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutContractorInput | PackageCreateOrConnectWithoutContractorInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutContractorInput | PackageUpsertWithWhereUniqueWithoutContractorInput[]
    createMany?: PackageCreateManyContractorInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutContractorInput | PackageUpdateWithWhereUniqueWithoutContractorInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutContractorInput | PackageUpdateManyWithWhereWithoutContractorInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type SubcontractorUncheckedUpdateManyWithoutContractorNestedInput = {
    create?: XOR<SubcontractorCreateWithoutContractorInput, SubcontractorUncheckedCreateWithoutContractorInput> | SubcontractorCreateWithoutContractorInput[] | SubcontractorUncheckedCreateWithoutContractorInput[]
    connectOrCreate?: SubcontractorCreateOrConnectWithoutContractorInput | SubcontractorCreateOrConnectWithoutContractorInput[]
    upsert?: SubcontractorUpsertWithWhereUniqueWithoutContractorInput | SubcontractorUpsertWithWhereUniqueWithoutContractorInput[]
    createMany?: SubcontractorCreateManyContractorInputEnvelope
    set?: SubcontractorWhereUniqueInput | SubcontractorWhereUniqueInput[]
    disconnect?: SubcontractorWhereUniqueInput | SubcontractorWhereUniqueInput[]
    delete?: SubcontractorWhereUniqueInput | SubcontractorWhereUniqueInput[]
    connect?: SubcontractorWhereUniqueInput | SubcontractorWhereUniqueInput[]
    update?: SubcontractorUpdateWithWhereUniqueWithoutContractorInput | SubcontractorUpdateWithWhereUniqueWithoutContractorInput[]
    updateMany?: SubcontractorUpdateManyWithWhereWithoutContractorInput | SubcontractorUpdateManyWithWhereWithoutContractorInput[]
    deleteMany?: SubcontractorScalarWhereInput | SubcontractorScalarWhereInput[]
  }

  export type ContractorCreateNestedOneWithoutSubcontractorsInput = {
    create?: XOR<ContractorCreateWithoutSubcontractorsInput, ContractorUncheckedCreateWithoutSubcontractorsInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutSubcontractorsInput
    connect?: ContractorWhereUniqueInput
  }

  export type PackageSubcontractorCreateNestedManyWithoutSubcontractorInput = {
    create?: XOR<PackageSubcontractorCreateWithoutSubcontractorInput, PackageSubcontractorUncheckedCreateWithoutSubcontractorInput> | PackageSubcontractorCreateWithoutSubcontractorInput[] | PackageSubcontractorUncheckedCreateWithoutSubcontractorInput[]
    connectOrCreate?: PackageSubcontractorCreateOrConnectWithoutSubcontractorInput | PackageSubcontractorCreateOrConnectWithoutSubcontractorInput[]
    createMany?: PackageSubcontractorCreateManySubcontractorInputEnvelope
    connect?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
  }

  export type PackageSubcontractorUncheckedCreateNestedManyWithoutSubcontractorInput = {
    create?: XOR<PackageSubcontractorCreateWithoutSubcontractorInput, PackageSubcontractorUncheckedCreateWithoutSubcontractorInput> | PackageSubcontractorCreateWithoutSubcontractorInput[] | PackageSubcontractorUncheckedCreateWithoutSubcontractorInput[]
    connectOrCreate?: PackageSubcontractorCreateOrConnectWithoutSubcontractorInput | PackageSubcontractorCreateOrConnectWithoutSubcontractorInput[]
    createMany?: PackageSubcontractorCreateManySubcontractorInputEnvelope
    connect?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
  }

  export type ContractorUpdateOneRequiredWithoutSubcontractorsNestedInput = {
    create?: XOR<ContractorCreateWithoutSubcontractorsInput, ContractorUncheckedCreateWithoutSubcontractorsInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutSubcontractorsInput
    upsert?: ContractorUpsertWithoutSubcontractorsInput
    connect?: ContractorWhereUniqueInput
    update?: XOR<XOR<ContractorUpdateToOneWithWhereWithoutSubcontractorsInput, ContractorUpdateWithoutSubcontractorsInput>, ContractorUncheckedUpdateWithoutSubcontractorsInput>
  }

  export type PackageSubcontractorUpdateManyWithoutSubcontractorNestedInput = {
    create?: XOR<PackageSubcontractorCreateWithoutSubcontractorInput, PackageSubcontractorUncheckedCreateWithoutSubcontractorInput> | PackageSubcontractorCreateWithoutSubcontractorInput[] | PackageSubcontractorUncheckedCreateWithoutSubcontractorInput[]
    connectOrCreate?: PackageSubcontractorCreateOrConnectWithoutSubcontractorInput | PackageSubcontractorCreateOrConnectWithoutSubcontractorInput[]
    upsert?: PackageSubcontractorUpsertWithWhereUniqueWithoutSubcontractorInput | PackageSubcontractorUpsertWithWhereUniqueWithoutSubcontractorInput[]
    createMany?: PackageSubcontractorCreateManySubcontractorInputEnvelope
    set?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    disconnect?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    delete?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    connect?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    update?: PackageSubcontractorUpdateWithWhereUniqueWithoutSubcontractorInput | PackageSubcontractorUpdateWithWhereUniqueWithoutSubcontractorInput[]
    updateMany?: PackageSubcontractorUpdateManyWithWhereWithoutSubcontractorInput | PackageSubcontractorUpdateManyWithWhereWithoutSubcontractorInput[]
    deleteMany?: PackageSubcontractorScalarWhereInput | PackageSubcontractorScalarWhereInput[]
  }

  export type PackageSubcontractorUncheckedUpdateManyWithoutSubcontractorNestedInput = {
    create?: XOR<PackageSubcontractorCreateWithoutSubcontractorInput, PackageSubcontractorUncheckedCreateWithoutSubcontractorInput> | PackageSubcontractorCreateWithoutSubcontractorInput[] | PackageSubcontractorUncheckedCreateWithoutSubcontractorInput[]
    connectOrCreate?: PackageSubcontractorCreateOrConnectWithoutSubcontractorInput | PackageSubcontractorCreateOrConnectWithoutSubcontractorInput[]
    upsert?: PackageSubcontractorUpsertWithWhereUniqueWithoutSubcontractorInput | PackageSubcontractorUpsertWithWhereUniqueWithoutSubcontractorInput[]
    createMany?: PackageSubcontractorCreateManySubcontractorInputEnvelope
    set?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    disconnect?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    delete?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    connect?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    update?: PackageSubcontractorUpdateWithWhereUniqueWithoutSubcontractorInput | PackageSubcontractorUpdateWithWhereUniqueWithoutSubcontractorInput[]
    updateMany?: PackageSubcontractorUpdateManyWithWhereWithoutSubcontractorInput | PackageSubcontractorUpdateManyWithWhereWithoutSubcontractorInput[]
    deleteMany?: PackageSubcontractorScalarWhereInput | PackageSubcontractorScalarWhereInput[]
  }

  export type DocumentCreateNestedManyWithoutPackageInput = {
    create?: XOR<DocumentCreateWithoutPackageInput, DocumentUncheckedCreateWithoutPackageInput> | DocumentCreateWithoutPackageInput[] | DocumentUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPackageInput | DocumentCreateOrConnectWithoutPackageInput[]
    createMany?: DocumentCreateManyPackageInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ContractorCreateNestedOneWithoutPackagesInput = {
    create?: XOR<ContractorCreateWithoutPackagesInput, ContractorUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutPackagesInput
    connect?: ContractorWhereUniqueInput
  }

  export type PackageSubcontractorCreateNestedManyWithoutPackageInput = {
    create?: XOR<PackageSubcontractorCreateWithoutPackageInput, PackageSubcontractorUncheckedCreateWithoutPackageInput> | PackageSubcontractorCreateWithoutPackageInput[] | PackageSubcontractorUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageSubcontractorCreateOrConnectWithoutPackageInput | PackageSubcontractorCreateOrConnectWithoutPackageInput[]
    createMany?: PackageSubcontractorCreateManyPackageInputEnvelope
    connect?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<DocumentCreateWithoutPackageInput, DocumentUncheckedCreateWithoutPackageInput> | DocumentCreateWithoutPackageInput[] | DocumentUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPackageInput | DocumentCreateOrConnectWithoutPackageInput[]
    createMany?: DocumentCreateManyPackageInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type PackageSubcontractorUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<PackageSubcontractorCreateWithoutPackageInput, PackageSubcontractorUncheckedCreateWithoutPackageInput> | PackageSubcontractorCreateWithoutPackageInput[] | PackageSubcontractorUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageSubcontractorCreateOrConnectWithoutPackageInput | PackageSubcontractorCreateOrConnectWithoutPackageInput[]
    createMany?: PackageSubcontractorCreateManyPackageInputEnvelope
    connect?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
  }

  export type DocumentUpdateManyWithoutPackageNestedInput = {
    create?: XOR<DocumentCreateWithoutPackageInput, DocumentUncheckedCreateWithoutPackageInput> | DocumentCreateWithoutPackageInput[] | DocumentUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPackageInput | DocumentCreateOrConnectWithoutPackageInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutPackageInput | DocumentUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: DocumentCreateManyPackageInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutPackageInput | DocumentUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutPackageInput | DocumentUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ContractorUpdateOneRequiredWithoutPackagesNestedInput = {
    create?: XOR<ContractorCreateWithoutPackagesInput, ContractorUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: ContractorCreateOrConnectWithoutPackagesInput
    upsert?: ContractorUpsertWithoutPackagesInput
    connect?: ContractorWhereUniqueInput
    update?: XOR<XOR<ContractorUpdateToOneWithWhereWithoutPackagesInput, ContractorUpdateWithoutPackagesInput>, ContractorUncheckedUpdateWithoutPackagesInput>
  }

  export type PackageSubcontractorUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PackageSubcontractorCreateWithoutPackageInput, PackageSubcontractorUncheckedCreateWithoutPackageInput> | PackageSubcontractorCreateWithoutPackageInput[] | PackageSubcontractorUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageSubcontractorCreateOrConnectWithoutPackageInput | PackageSubcontractorCreateOrConnectWithoutPackageInput[]
    upsert?: PackageSubcontractorUpsertWithWhereUniqueWithoutPackageInput | PackageSubcontractorUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PackageSubcontractorCreateManyPackageInputEnvelope
    set?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    disconnect?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    delete?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    connect?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    update?: PackageSubcontractorUpdateWithWhereUniqueWithoutPackageInput | PackageSubcontractorUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PackageSubcontractorUpdateManyWithWhereWithoutPackageInput | PackageSubcontractorUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PackageSubcontractorScalarWhereInput | PackageSubcontractorScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<DocumentCreateWithoutPackageInput, DocumentUncheckedCreateWithoutPackageInput> | DocumentCreateWithoutPackageInput[] | DocumentUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPackageInput | DocumentCreateOrConnectWithoutPackageInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutPackageInput | DocumentUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: DocumentCreateManyPackageInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutPackageInput | DocumentUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutPackageInput | DocumentUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type PackageSubcontractorUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PackageSubcontractorCreateWithoutPackageInput, PackageSubcontractorUncheckedCreateWithoutPackageInput> | PackageSubcontractorCreateWithoutPackageInput[] | PackageSubcontractorUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageSubcontractorCreateOrConnectWithoutPackageInput | PackageSubcontractorCreateOrConnectWithoutPackageInput[]
    upsert?: PackageSubcontractorUpsertWithWhereUniqueWithoutPackageInput | PackageSubcontractorUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PackageSubcontractorCreateManyPackageInputEnvelope
    set?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    disconnect?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    delete?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    connect?: PackageSubcontractorWhereUniqueInput | PackageSubcontractorWhereUniqueInput[]
    update?: PackageSubcontractorUpdateWithWhereUniqueWithoutPackageInput | PackageSubcontractorUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PackageSubcontractorUpdateManyWithWhereWithoutPackageInput | PackageSubcontractorUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PackageSubcontractorScalarWhereInput | PackageSubcontractorScalarWhereInput[]
  }

  export type PackageCreateNestedOneWithoutSubcontractorsInput = {
    create?: XOR<PackageCreateWithoutSubcontractorsInput, PackageUncheckedCreateWithoutSubcontractorsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutSubcontractorsInput
    connect?: PackageWhereUniqueInput
  }

  export type SubcontractorCreateNestedOneWithoutPackagesInput = {
    create?: XOR<SubcontractorCreateWithoutPackagesInput, SubcontractorUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: SubcontractorCreateOrConnectWithoutPackagesInput
    connect?: SubcontractorWhereUniqueInput
  }

  export type PackageUpdateOneRequiredWithoutSubcontractorsNestedInput = {
    create?: XOR<PackageCreateWithoutSubcontractorsInput, PackageUncheckedCreateWithoutSubcontractorsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutSubcontractorsInput
    upsert?: PackageUpsertWithoutSubcontractorsInput
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutSubcontractorsInput, PackageUpdateWithoutSubcontractorsInput>, PackageUncheckedUpdateWithoutSubcontractorsInput>
  }

  export type SubcontractorUpdateOneRequiredWithoutPackagesNestedInput = {
    create?: XOR<SubcontractorCreateWithoutPackagesInput, SubcontractorUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: SubcontractorCreateOrConnectWithoutPackagesInput
    upsert?: SubcontractorUpsertWithoutPackagesInput
    connect?: SubcontractorWhereUniqueInput
    update?: XOR<XOR<SubcontractorUpdateToOneWithWhereWithoutPackagesInput, SubcontractorUpdateWithoutPackagesInput>, SubcontractorUncheckedUpdateWithoutPackagesInput>
  }

  export type PackageCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<PackageCreateWithoutDocumentsInput, PackageUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutDocumentsInput
    connect?: PackageWhereUniqueInput
  }

  export type PackageUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<PackageCreateWithoutDocumentsInput, PackageUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutDocumentsInput
    upsert?: PackageUpsertWithoutDocumentsInput
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutDocumentsInput, PackageUpdateWithoutDocumentsInput>, PackageUncheckedUpdateWithoutDocumentsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PackageCreateWithoutContractorInput = {
    customerName: string
    propertyAddress: string
    county: string
    permitType?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentCreateNestedManyWithoutPackageInput
    subcontractors?: PackageSubcontractorCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateWithoutContractorInput = {
    id?: number
    customerName: string
    propertyAddress: string
    county: string
    permitType?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutPackageInput
    subcontractors?: PackageSubcontractorUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutContractorInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutContractorInput, PackageUncheckedCreateWithoutContractorInput>
  }

  export type PackageCreateManyContractorInputEnvelope = {
    data: PackageCreateManyContractorInput | PackageCreateManyContractorInput[]
    skipDuplicates?: boolean
  }

  export type SubcontractorCreateWithoutContractorInput = {
    companyName: string
    licenseNumber?: string | null
    address?: string | null
    phoneNumber?: string | null
    email?: string | null
    contactPerson?: string | null
    tradeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageSubcontractorCreateNestedManyWithoutSubcontractorInput
  }

  export type SubcontractorUncheckedCreateWithoutContractorInput = {
    id?: number
    companyName: string
    licenseNumber?: string | null
    address?: string | null
    phoneNumber?: string | null
    email?: string | null
    contactPerson?: string | null
    tradeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageSubcontractorUncheckedCreateNestedManyWithoutSubcontractorInput
  }

  export type SubcontractorCreateOrConnectWithoutContractorInput = {
    where: SubcontractorWhereUniqueInput
    create: XOR<SubcontractorCreateWithoutContractorInput, SubcontractorUncheckedCreateWithoutContractorInput>
  }

  export type SubcontractorCreateManyContractorInputEnvelope = {
    data: SubcontractorCreateManyContractorInput | SubcontractorCreateManyContractorInput[]
    skipDuplicates?: boolean
  }

  export type PackageUpsertWithWhereUniqueWithoutContractorInput = {
    where: PackageWhereUniqueInput
    update: XOR<PackageUpdateWithoutContractorInput, PackageUncheckedUpdateWithoutContractorInput>
    create: XOR<PackageCreateWithoutContractorInput, PackageUncheckedCreateWithoutContractorInput>
  }

  export type PackageUpdateWithWhereUniqueWithoutContractorInput = {
    where: PackageWhereUniqueInput
    data: XOR<PackageUpdateWithoutContractorInput, PackageUncheckedUpdateWithoutContractorInput>
  }

  export type PackageUpdateManyWithWhereWithoutContractorInput = {
    where: PackageScalarWhereInput
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyWithoutContractorInput>
  }

  export type PackageScalarWhereInput = {
    AND?: PackageScalarWhereInput | PackageScalarWhereInput[]
    OR?: PackageScalarWhereInput[]
    NOT?: PackageScalarWhereInput | PackageScalarWhereInput[]
    id?: IntFilter<"Package"> | number
    customerName?: StringFilter<"Package"> | string
    propertyAddress?: StringFilter<"Package"> | string
    county?: StringFilter<"Package"> | string
    permitType?: StringFilter<"Package"> | string
    status?: StringFilter<"Package"> | string
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
    contractorId?: IntFilter<"Package"> | number
  }

  export type SubcontractorUpsertWithWhereUniqueWithoutContractorInput = {
    where: SubcontractorWhereUniqueInput
    update: XOR<SubcontractorUpdateWithoutContractorInput, SubcontractorUncheckedUpdateWithoutContractorInput>
    create: XOR<SubcontractorCreateWithoutContractorInput, SubcontractorUncheckedCreateWithoutContractorInput>
  }

  export type SubcontractorUpdateWithWhereUniqueWithoutContractorInput = {
    where: SubcontractorWhereUniqueInput
    data: XOR<SubcontractorUpdateWithoutContractorInput, SubcontractorUncheckedUpdateWithoutContractorInput>
  }

  export type SubcontractorUpdateManyWithWhereWithoutContractorInput = {
    where: SubcontractorScalarWhereInput
    data: XOR<SubcontractorUpdateManyMutationInput, SubcontractorUncheckedUpdateManyWithoutContractorInput>
  }

  export type SubcontractorScalarWhereInput = {
    AND?: SubcontractorScalarWhereInput | SubcontractorScalarWhereInput[]
    OR?: SubcontractorScalarWhereInput[]
    NOT?: SubcontractorScalarWhereInput | SubcontractorScalarWhereInput[]
    id?: IntFilter<"Subcontractor"> | number
    companyName?: StringFilter<"Subcontractor"> | string
    licenseNumber?: StringNullableFilter<"Subcontractor"> | string | null
    address?: StringNullableFilter<"Subcontractor"> | string | null
    phoneNumber?: StringNullableFilter<"Subcontractor"> | string | null
    email?: StringNullableFilter<"Subcontractor"> | string | null
    contactPerson?: StringNullableFilter<"Subcontractor"> | string | null
    tradeType?: StringFilter<"Subcontractor"> | string
    createdAt?: DateTimeFilter<"Subcontractor"> | Date | string
    updatedAt?: DateTimeFilter<"Subcontractor"> | Date | string
    contractorId?: IntFilter<"Subcontractor"> | number
  }

  export type ContractorCreateWithoutSubcontractorsInput = {
    companyName: string
    licenseNumber: string
    address: string
    phoneNumber: string
    email?: string | null
    contactPerson?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageCreateNestedManyWithoutContractorInput
  }

  export type ContractorUncheckedCreateWithoutSubcontractorsInput = {
    id?: number
    companyName: string
    licenseNumber: string
    address: string
    phoneNumber: string
    email?: string | null
    contactPerson?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageUncheckedCreateNestedManyWithoutContractorInput
  }

  export type ContractorCreateOrConnectWithoutSubcontractorsInput = {
    where: ContractorWhereUniqueInput
    create: XOR<ContractorCreateWithoutSubcontractorsInput, ContractorUncheckedCreateWithoutSubcontractorsInput>
  }

  export type PackageSubcontractorCreateWithoutSubcontractorInput = {
    tradeType: string
    createdAt?: Date | string
    package: PackageCreateNestedOneWithoutSubcontractorsInput
  }

  export type PackageSubcontractorUncheckedCreateWithoutSubcontractorInput = {
    id?: number
    packageId: number
    tradeType: string
    createdAt?: Date | string
  }

  export type PackageSubcontractorCreateOrConnectWithoutSubcontractorInput = {
    where: PackageSubcontractorWhereUniqueInput
    create: XOR<PackageSubcontractorCreateWithoutSubcontractorInput, PackageSubcontractorUncheckedCreateWithoutSubcontractorInput>
  }

  export type PackageSubcontractorCreateManySubcontractorInputEnvelope = {
    data: PackageSubcontractorCreateManySubcontractorInput | PackageSubcontractorCreateManySubcontractorInput[]
    skipDuplicates?: boolean
  }

  export type ContractorUpsertWithoutSubcontractorsInput = {
    update: XOR<ContractorUpdateWithoutSubcontractorsInput, ContractorUncheckedUpdateWithoutSubcontractorsInput>
    create: XOR<ContractorCreateWithoutSubcontractorsInput, ContractorUncheckedCreateWithoutSubcontractorsInput>
    where?: ContractorWhereInput
  }

  export type ContractorUpdateToOneWithWhereWithoutSubcontractorsInput = {
    where?: ContractorWhereInput
    data: XOR<ContractorUpdateWithoutSubcontractorsInput, ContractorUncheckedUpdateWithoutSubcontractorsInput>
  }

  export type ContractorUpdateWithoutSubcontractorsInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageUpdateManyWithoutContractorNestedInput
  }

  export type ContractorUncheckedUpdateWithoutSubcontractorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageUncheckedUpdateManyWithoutContractorNestedInput
  }

  export type PackageSubcontractorUpsertWithWhereUniqueWithoutSubcontractorInput = {
    where: PackageSubcontractorWhereUniqueInput
    update: XOR<PackageSubcontractorUpdateWithoutSubcontractorInput, PackageSubcontractorUncheckedUpdateWithoutSubcontractorInput>
    create: XOR<PackageSubcontractorCreateWithoutSubcontractorInput, PackageSubcontractorUncheckedCreateWithoutSubcontractorInput>
  }

  export type PackageSubcontractorUpdateWithWhereUniqueWithoutSubcontractorInput = {
    where: PackageSubcontractorWhereUniqueInput
    data: XOR<PackageSubcontractorUpdateWithoutSubcontractorInput, PackageSubcontractorUncheckedUpdateWithoutSubcontractorInput>
  }

  export type PackageSubcontractorUpdateManyWithWhereWithoutSubcontractorInput = {
    where: PackageSubcontractorScalarWhereInput
    data: XOR<PackageSubcontractorUpdateManyMutationInput, PackageSubcontractorUncheckedUpdateManyWithoutSubcontractorInput>
  }

  export type PackageSubcontractorScalarWhereInput = {
    AND?: PackageSubcontractorScalarWhereInput | PackageSubcontractorScalarWhereInput[]
    OR?: PackageSubcontractorScalarWhereInput[]
    NOT?: PackageSubcontractorScalarWhereInput | PackageSubcontractorScalarWhereInput[]
    id?: IntFilter<"PackageSubcontractor"> | number
    packageId?: IntFilter<"PackageSubcontractor"> | number
    subcontractorId?: IntFilter<"PackageSubcontractor"> | number
    tradeType?: StringFilter<"PackageSubcontractor"> | string
    createdAt?: DateTimeFilter<"PackageSubcontractor"> | Date | string
  }

  export type DocumentCreateWithoutPackageInput = {
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    uploaderName: string
    version?: string
  }

  export type DocumentUncheckedCreateWithoutPackageInput = {
    id?: number
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    uploaderName: string
    version?: string
  }

  export type DocumentCreateOrConnectWithoutPackageInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutPackageInput, DocumentUncheckedCreateWithoutPackageInput>
  }

  export type DocumentCreateManyPackageInputEnvelope = {
    data: DocumentCreateManyPackageInput | DocumentCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type ContractorCreateWithoutPackagesInput = {
    companyName: string
    licenseNumber: string
    address: string
    phoneNumber: string
    email?: string | null
    contactPerson?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subcontractors?: SubcontractorCreateNestedManyWithoutContractorInput
  }

  export type ContractorUncheckedCreateWithoutPackagesInput = {
    id?: number
    companyName: string
    licenseNumber: string
    address: string
    phoneNumber: string
    email?: string | null
    contactPerson?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subcontractors?: SubcontractorUncheckedCreateNestedManyWithoutContractorInput
  }

  export type ContractorCreateOrConnectWithoutPackagesInput = {
    where: ContractorWhereUniqueInput
    create: XOR<ContractorCreateWithoutPackagesInput, ContractorUncheckedCreateWithoutPackagesInput>
  }

  export type PackageSubcontractorCreateWithoutPackageInput = {
    tradeType: string
    createdAt?: Date | string
    subcontractor: SubcontractorCreateNestedOneWithoutPackagesInput
  }

  export type PackageSubcontractorUncheckedCreateWithoutPackageInput = {
    id?: number
    subcontractorId: number
    tradeType: string
    createdAt?: Date | string
  }

  export type PackageSubcontractorCreateOrConnectWithoutPackageInput = {
    where: PackageSubcontractorWhereUniqueInput
    create: XOR<PackageSubcontractorCreateWithoutPackageInput, PackageSubcontractorUncheckedCreateWithoutPackageInput>
  }

  export type PackageSubcontractorCreateManyPackageInputEnvelope = {
    data: PackageSubcontractorCreateManyPackageInput | PackageSubcontractorCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type DocumentUpsertWithWhereUniqueWithoutPackageInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutPackageInput, DocumentUncheckedUpdateWithoutPackageInput>
    create: XOR<DocumentCreateWithoutPackageInput, DocumentUncheckedCreateWithoutPackageInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutPackageInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutPackageInput, DocumentUncheckedUpdateWithoutPackageInput>
  }

  export type DocumentUpdateManyWithWhereWithoutPackageInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutPackageInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: IntFilter<"Document"> | number
    fileName?: StringFilter<"Document"> | string
    filePath?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
    uploaderName?: StringFilter<"Document"> | string
    version?: StringFilter<"Document"> | string
    packageId?: IntFilter<"Document"> | number
  }

  export type ContractorUpsertWithoutPackagesInput = {
    update: XOR<ContractorUpdateWithoutPackagesInput, ContractorUncheckedUpdateWithoutPackagesInput>
    create: XOR<ContractorCreateWithoutPackagesInput, ContractorUncheckedCreateWithoutPackagesInput>
    where?: ContractorWhereInput
  }

  export type ContractorUpdateToOneWithWhereWithoutPackagesInput = {
    where?: ContractorWhereInput
    data: XOR<ContractorUpdateWithoutPackagesInput, ContractorUncheckedUpdateWithoutPackagesInput>
  }

  export type ContractorUpdateWithoutPackagesInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subcontractors?: SubcontractorUpdateManyWithoutContractorNestedInput
  }

  export type ContractorUncheckedUpdateWithoutPackagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subcontractors?: SubcontractorUncheckedUpdateManyWithoutContractorNestedInput
  }

  export type PackageSubcontractorUpsertWithWhereUniqueWithoutPackageInput = {
    where: PackageSubcontractorWhereUniqueInput
    update: XOR<PackageSubcontractorUpdateWithoutPackageInput, PackageSubcontractorUncheckedUpdateWithoutPackageInput>
    create: XOR<PackageSubcontractorCreateWithoutPackageInput, PackageSubcontractorUncheckedCreateWithoutPackageInput>
  }

  export type PackageSubcontractorUpdateWithWhereUniqueWithoutPackageInput = {
    where: PackageSubcontractorWhereUniqueInput
    data: XOR<PackageSubcontractorUpdateWithoutPackageInput, PackageSubcontractorUncheckedUpdateWithoutPackageInput>
  }

  export type PackageSubcontractorUpdateManyWithWhereWithoutPackageInput = {
    where: PackageSubcontractorScalarWhereInput
    data: XOR<PackageSubcontractorUpdateManyMutationInput, PackageSubcontractorUncheckedUpdateManyWithoutPackageInput>
  }

  export type PackageCreateWithoutSubcontractorsInput = {
    customerName: string
    propertyAddress: string
    county: string
    permitType?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentCreateNestedManyWithoutPackageInput
    contractor: ContractorCreateNestedOneWithoutPackagesInput
  }

  export type PackageUncheckedCreateWithoutSubcontractorsInput = {
    id?: number
    customerName: string
    propertyAddress: string
    county: string
    permitType?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorId: number
    documents?: DocumentUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutSubcontractorsInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutSubcontractorsInput, PackageUncheckedCreateWithoutSubcontractorsInput>
  }

  export type SubcontractorCreateWithoutPackagesInput = {
    companyName: string
    licenseNumber?: string | null
    address?: string | null
    phoneNumber?: string | null
    email?: string | null
    contactPerson?: string | null
    tradeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contractor: ContractorCreateNestedOneWithoutSubcontractorsInput
  }

  export type SubcontractorUncheckedCreateWithoutPackagesInput = {
    id?: number
    companyName: string
    licenseNumber?: string | null
    address?: string | null
    phoneNumber?: string | null
    email?: string | null
    contactPerson?: string | null
    tradeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorId: number
  }

  export type SubcontractorCreateOrConnectWithoutPackagesInput = {
    where: SubcontractorWhereUniqueInput
    create: XOR<SubcontractorCreateWithoutPackagesInput, SubcontractorUncheckedCreateWithoutPackagesInput>
  }

  export type PackageUpsertWithoutSubcontractorsInput = {
    update: XOR<PackageUpdateWithoutSubcontractorsInput, PackageUncheckedUpdateWithoutSubcontractorsInput>
    create: XOR<PackageCreateWithoutSubcontractorsInput, PackageUncheckedCreateWithoutSubcontractorsInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutSubcontractorsInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutSubcontractorsInput, PackageUncheckedUpdateWithoutSubcontractorsInput>
  }

  export type PackageUpdateWithoutSubcontractorsInput = {
    customerName?: StringFieldUpdateOperationsInput | string
    propertyAddress?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    permitType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUpdateManyWithoutPackageNestedInput
    contractor?: ContractorUpdateOneRequiredWithoutPackagesNestedInput
  }

  export type PackageUncheckedUpdateWithoutSubcontractorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    propertyAddress?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    permitType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorId?: IntFieldUpdateOperationsInput | number
    documents?: DocumentUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type SubcontractorUpsertWithoutPackagesInput = {
    update: XOR<SubcontractorUpdateWithoutPackagesInput, SubcontractorUncheckedUpdateWithoutPackagesInput>
    create: XOR<SubcontractorCreateWithoutPackagesInput, SubcontractorUncheckedCreateWithoutPackagesInput>
    where?: SubcontractorWhereInput
  }

  export type SubcontractorUpdateToOneWithWhereWithoutPackagesInput = {
    where?: SubcontractorWhereInput
    data: XOR<SubcontractorUpdateWithoutPackagesInput, SubcontractorUncheckedUpdateWithoutPackagesInput>
  }

  export type SubcontractorUpdateWithoutPackagesInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractor?: ContractorUpdateOneRequiredWithoutSubcontractorsNestedInput
  }

  export type SubcontractorUncheckedUpdateWithoutPackagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorId?: IntFieldUpdateOperationsInput | number
  }

  export type PackageCreateWithoutDocumentsInput = {
    customerName: string
    propertyAddress: string
    county: string
    permitType?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contractor: ContractorCreateNestedOneWithoutPackagesInput
    subcontractors?: PackageSubcontractorCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateWithoutDocumentsInput = {
    id?: number
    customerName: string
    propertyAddress: string
    county: string
    permitType?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorId: number
    subcontractors?: PackageSubcontractorUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutDocumentsInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutDocumentsInput, PackageUncheckedCreateWithoutDocumentsInput>
  }

  export type PackageUpsertWithoutDocumentsInput = {
    update: XOR<PackageUpdateWithoutDocumentsInput, PackageUncheckedUpdateWithoutDocumentsInput>
    create: XOR<PackageCreateWithoutDocumentsInput, PackageUncheckedCreateWithoutDocumentsInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutDocumentsInput, PackageUncheckedUpdateWithoutDocumentsInput>
  }

  export type PackageUpdateWithoutDocumentsInput = {
    customerName?: StringFieldUpdateOperationsInput | string
    propertyAddress?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    permitType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractor?: ContractorUpdateOneRequiredWithoutPackagesNestedInput
    subcontractors?: PackageSubcontractorUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    propertyAddress?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    permitType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorId?: IntFieldUpdateOperationsInput | number
    subcontractors?: PackageSubcontractorUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageCreateManyContractorInput = {
    id?: number
    customerName: string
    propertyAddress: string
    county: string
    permitType?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubcontractorCreateManyContractorInput = {
    id?: number
    companyName: string
    licenseNumber?: string | null
    address?: string | null
    phoneNumber?: string | null
    email?: string | null
    contactPerson?: string | null
    tradeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackageUpdateWithoutContractorInput = {
    customerName?: StringFieldUpdateOperationsInput | string
    propertyAddress?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    permitType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUpdateManyWithoutPackageNestedInput
    subcontractors?: PackageSubcontractorUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateWithoutContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    propertyAddress?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    permitType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutPackageNestedInput
    subcontractors?: PackageSubcontractorUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateManyWithoutContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerName?: StringFieldUpdateOperationsInput | string
    propertyAddress?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    permitType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubcontractorUpdateWithoutContractorInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageSubcontractorUpdateManyWithoutSubcontractorNestedInput
  }

  export type SubcontractorUncheckedUpdateWithoutContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageSubcontractorUncheckedUpdateManyWithoutSubcontractorNestedInput
  }

  export type SubcontractorUncheckedUpdateManyWithoutContractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageSubcontractorCreateManySubcontractorInput = {
    id?: number
    packageId: number
    tradeType: string
    createdAt?: Date | string
  }

  export type PackageSubcontractorUpdateWithoutSubcontractorInput = {
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: PackageUpdateOneRequiredWithoutSubcontractorsNestedInput
  }

  export type PackageSubcontractorUncheckedUpdateWithoutSubcontractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageSubcontractorUncheckedUpdateManyWithoutSubcontractorInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateManyPackageInput = {
    id?: number
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    uploaderName: string
    version?: string
  }

  export type PackageSubcontractorCreateManyPackageInput = {
    id?: number
    subcontractorId: number
    tradeType: string
    createdAt?: Date | string
  }

  export type DocumentUpdateWithoutPackageInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploaderName?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUncheckedUpdateWithoutPackageInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploaderName?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUncheckedUpdateManyWithoutPackageInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploaderName?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
  }

  export type PackageSubcontractorUpdateWithoutPackageInput = {
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subcontractor?: SubcontractorUpdateOneRequiredWithoutPackagesNestedInput
  }

  export type PackageSubcontractorUncheckedUpdateWithoutPackageInput = {
    id?: IntFieldUpdateOperationsInput | number
    subcontractorId?: IntFieldUpdateOperationsInput | number
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageSubcontractorUncheckedUpdateManyWithoutPackageInput = {
    id?: IntFieldUpdateOperationsInput | number
    subcontractorId?: IntFieldUpdateOperationsInput | number
    tradeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ContractorCountOutputTypeDefaultArgs instead
     */
    export type ContractorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContractorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubcontractorCountOutputTypeDefaultArgs instead
     */
    export type SubcontractorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubcontractorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PackageCountOutputTypeDefaultArgs instead
     */
    export type PackageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PackageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContractorDefaultArgs instead
     */
    export type ContractorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContractorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubcontractorDefaultArgs instead
     */
    export type SubcontractorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubcontractorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PackageDefaultArgs instead
     */
    export type PackageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PackageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PackageSubcontractorDefaultArgs instead
     */
    export type PackageSubcontractorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PackageSubcontractorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentDefaultArgs instead
     */
    export type DocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}