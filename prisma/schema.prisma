generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String
  role  String
}

model Contractor {
  licenseNumber String    @id @unique
  companyName   String
  address       String
  phoneNumber   String
  email         String?
  contactPerson String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  packages      Package[]
}

model Subcontractor {
  id            Int                    @id @default(autoincrement())
  companyName   String
  licenseNumber String?
  address       String?
  phoneNumber   String?
  email         String?
  contactPerson String?
  tradeType     String
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  packages      PackageSubcontractor[]

  @@unique([companyName, licenseNumber])
}

model Package {
  id                Int                    @id @default(autoincrement())
  customerName      String
  propertyAddress   String
  county            String
  status            String                 @default("Draft")
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  permitType        String                 @default("Mobile Home Permit")
  contractorLicense String?
  documents         Document[]
  contractor        Contractor?            @relation(fields: [contractorLicense], references: [licenseNumber])
  subcontractors    PackageSubcontractor[]
  checklists        PackageChecklist[]
}

model PackageSubcontractor {
  id              Int           @id @default(autoincrement())
  packageId       Int
  subcontractorId Int
  tradeType       String
  createdAt       DateTime      @default(now())
  package         Package       @relation(fields: [packageId], references: [id], onDelete: Cascade)
  subcontractor   Subcontractor @relation(fields: [subcontractorId], references: [id], onDelete: Cascade)

  @@unique([packageId, subcontractorId])
}

model Document {
  id           Int      @id @default(autoincrement())
  fileName     String
  filePath     String
  uploadedAt   DateTime @default(now())
  uploaderName String
  version      String   @default("1.0")
  packageId    Int
  package      Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
}

model ChecklistTemplate {
  id          Int                   @id @default(autoincrement())
  county      String
  permitType  String
  items       ChecklistItem[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  
  @@unique([county, permitType])
}

model ChecklistItem {
  id                    Int                @id @default(autoincrement())
  name                  String
  isRequired            Boolean            @default(true)
  isCustom              Boolean            @default(false)
  order                 Int                @default(0)
  checklistTemplateId   Int
  template              ChecklistTemplate  @relation(fields: [checklistTemplateId], references: [id], onDelete: Cascade)
  packageItems          PackageChecklistItem[]
}

model PackageChecklist {
  id        Int                    @id @default(autoincrement())
  packageId Int
  package   Package                @relation(fields: [packageId], references: [id], onDelete: Cascade)
  items     PackageChecklistItem[]
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  
  @@unique([packageId])
}

model PackageChecklistItem {
  id                  Int              @id @default(autoincrement())
  packageChecklistId  Int
  checklistItemId     Int
  isCompleted         Boolean          @default(false)
  completedAt         DateTime?
  completedBy         String?
  notes               String?
  packageChecklist    PackageChecklist @relation(fields: [packageChecklistId], references: [id], onDelete: Cascade)
  checklistItem       ChecklistItem    @relation(fields: [checklistItemId], references: [id], onDelete: Cascade)
  
  @@unique([packageChecklistId, checklistItemId])
}
